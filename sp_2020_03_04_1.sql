
CREATE PROCEDURE [dp].[RETURN_TABLE] AS
DECLARE @JSON_MESSAGE NVARCHAR(MAX) =
'{
	"COMPOSITION_NAME": [
		{
			"PK": 101513,
			"TS": "2020-01-20T15:27:16.2080000",
			"COMPOSITION_NAME": "ACETAMINOPHEN 325MG, PSEUDOEPHEDRINE HYDROCHLORIDE 30MG, CHLORPHENIRAMINE MALEATE 2MG, CODEINE PHOSPHATE 8MG in TABLET | 11921",
			"UPDATED_BY": "MIGRATION",
			"COMPOSITION": [
				{
					"PK": 221745,
					"INGREDIENT_ROLE_FK": null,
					"TS": "2020-01-20T15:27:16.2080000",
					"VARIANT_FK": null,
					"UNIT_OF_PRESENTATION_FK": 115,
					"PARENT_COMPOSITION_FK": null,
					"ADMIN_DOSAGE_FORM_FK": 87,
					"MANF_DOSAGE_FORM_FK": 87,
					"UPDATED_BY": "MIGRATION",
					"COMPOSITION_NAME_FK": 101513,
					"UNIT_OF_PRESENTATION": [
						{
							"PK": 115,
							"UNIT_OF_PRESENTATION_DESC_EN": "CAP",
							"UNIT_OF_PRESENTATION_DESC_FR": "Capsule",
							"INACTIVE_DATE": null,
							"DISPLAY_STRENGTH_FLAG": true,
							"UPDATED_BY": "MIGRATION",
							"TS": "2020-01-21T15:32:52.1890000",
							"GROUP_ID": 115,
							"PREFERRED": true,
							"RM_METRIC_UNIT_CODE": 7,
							"UNIT_OF_PRESENTATION_CODE": "CAP"
						}
					],
					"COMPOSITION_ROUTE_OF_ADMINISTRATION": [
						{
							"PK": 167609,
							"ROUTE_OF_ADMINISTRATION_FK": 282,
							"TS": "2020-01-20T15:27:16.2080000",
							"UPDATED_BY": "MIGRATION",
							"COMPOSITION_FK": 221745,
							"ROUTE_OF_ADMINISTRATION": [
								{
									"PK": 282,
									"RM_ROUTE_OF_ADMINISTRATION_CODE": 56,
									"ROUTE_OF_ADMINISTRATION_DESC_EN": "ORAL",
									"INACTIVE_DATE": null,
									"ROUTE_OF_ADMINISTRATION_DESC_FR": "Orale",
									"TS": "2019-11-14T13:18:32.0534780",
									"UPDATED_BY": "MIGRATION",
									"GROUP_ID": 282,
									"PREFERRED": true
								}
							]
						}
					],
					"DOSAGE_FORM": [
						{
							"PK": 87,
							"DOSAGE_FORM_DESC_EN": "TABLET",
							"DOSAGE_FORM_DESC_FR": "Comprimé",
							"INACTIVE_DATE": null,
							"UPDATED_BY": "MIGRATION",
							"TS": "2019-11-14T11:25:26.7906900",
							"GROUP_ID": 87,
							"PREFERRED": true,
							"RM_PHARM_FORM_CODE": 85
						},
						{
							"PK": 87,
							"DOSAGE_FORM_DESC_EN": "TABLET",
							"DOSAGE_FORM_DESC_FR": "Comprimé",
							"INACTIVE_DATE": null,
							"UPDATED_BY": "MIGRATION",
							"TS": "2019-11-14T11:25:26.7906900",
							"GROUP_ID": 87,
							"PREFERRED": true,
							"RM_PHARM_FORM_CODE": 85
						}
					]
				},
				{
					"PK": 222590,
					"INGREDIENT_ROLE_FK": 3,
					"TS": "2020-01-20T15:27:16.2080000",
					"VARIANT_FK": null,
					"UNIT_OF_PRESENTATION_FK": null,
					"PARENT_COMPOSITION_FK": 221745,
					"ADMIN_DOSAGE_FORM_FK": null,
					"MANF_DOSAGE_FORM_FK": null,
					"UPDATED_BY": "MIGRATION",
					"COMPOSITION_NAME_FK": 101513,
					"UNIT_OF_PRESENTATION": null,
					"COMPOSITION_ROUTE_OF_ADMINISTRATION": null,
					"DOSAGE_FORM": null
				},
				{
					"PK": 222965,
					"INGREDIENT_ROLE_FK": 2,
					"TS": "2020-01-20T15:27:16.2080000",
					"VARIANT_FK": null,
					"UNIT_OF_PRESENTATION_FK": null,
					"PARENT_COMPOSITION_FK": 221745,
					"ADMIN_DOSAGE_FORM_FK": null,
					"MANF_DOSAGE_FORM_FK": null,
					"UPDATED_BY": "MIGRATION",
					"COMPOSITION_NAME_FK": 101513,
					"UNIT_OF_PRESENTATION": null,
					"COMPOSITION_ROUTE_OF_ADMINISTRATION": null,
					"DOSAGE_FORM": null
				}
			]
		}
	]
}'

SELECT * FROM OPENJSON(@JSON_MESSAGE)
WITH
(
	PK BIGINT '$.COMPOSITION_NAME[0].PK',
	TS DATETIME2 '$.COMPOSITION_NAME[0].TS',
	COMPOSITION_NAME NVARCHAR(4000) '$.COMPOSITION_NAME[0].COMPOSITION_NAME',
	UPDATED_BY NVARCHAR(200) '$.COMPOSITION_NAME[0].UPDATED_BY',
	COMPOSITION NVARCHAR(MAX) '$.COMPOSITION_NAME[0].COMPOSITION' AS JSON
) AS COMPOSITION_NAME
CROSS APPLY OPENJSON(COMPOSITION)
WITH
(
	PK BIGINT,
	INGREDIENT_ROLE_FK       bigint,
	TS                       datetime2,
	VARIANT_FK               bigint,
	UNIT_OF_PRESENTATION_FK  bigint,
	PARENT_COMPOSITION_FK    bigint,
	ADMIN_DOSAGE_FORM_FK     bigint,
	MANF_DOSAGE_FORM_FK      bigint,
	UPDATED_BY               nvarchar(200),
	COMPOSITION_NAME_FK      bigint
) AS COMPOSITION
GO


CREATE PROCEDURE DP.USP_GET_BO_COMPOSITION (@PK BIGINT)
AS
BEGIN
	SELECT	COMPOSITION_NAME.*
		,	(
				SELECT	COMPOSITION.*
					,	(
							SELECT	UNIT_OF_PRESENTATION.*
							FROM DP.UNIT_OF_PRESENTATION
							WHERE UNIT_OF_PRESENTATION.PK = COMPOSITION.UNIT_OF_PRESENTATION_FK
							FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS UNIT_OF_PRESENTATION
					,	(
							SELECT	COMPOSITION_ROUTE_OF_ADMINISTRATION.*
								,	(
										SELECT ROUTE_OF_ADMINISTRATION.*
										FROM DP.ROUTE_OF_ADMINISTRATION
										WHERE ROUTE_OF_ADMINISTRATION.PK = COMPOSITION_ROUTE_OF_ADMINISTRATION.ROUTE_OF_ADMINISTRATION_FK
										FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS ROUTE_OF_ADMINISTRATION
							FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION
							WHERE COMPOSITION_ROUTE_OF_ADMINISTRATION.COMPOSITION_FK = COMPOSITION.PK
							FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS COMPOSITION_ROUTE_OF_ADMINISTRATION
					,	(
							SELECT *
							FROM
							(
								SELECT	DOSAGE_FORM.*
								FROM DP.DOSAGE_FORM
								WHERE DOSAGE_FORM.PK = MANF_DOSAGE_FORM_FK
								UNION ALL
								SELECT	DOSAGE_FORM.*
								FROM DP.DOSAGE_FORM
								WHERE DOSAGE_FORM.PK = ADMIN_DOSAGE_FORM_FK
							) AS X FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS DOSAGE_FORM
				FROM DP.COMPOSITION
				WHERE COMPOSITION.COMPOSITION_NAME_FK = COMPOSITION_NAME.PK
				FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS COMPOSITION
	FROM DP.COMPOSITION_NAME AS COMPOSITION_NAME
	WHERE COMPOSITION_NAME.PK = @PK FOR JSON AUTO, INCLUDE_NULL_VALUES, ROOT('COMPOSITION_NAME')
END
GO

CREATE PROCEDURE [dp].[USP_JSON_GET_COMPOSITION] (@PK BIGINT)
AS
BEGIN
	SET NOCOUNT ON
	SELECT	PARENT_COMPOSITION.*
		-- DRUG PRODUCT
		,	(	SELECT	DP_COMPOSITION.*
					,	(	SELECT	DP.*
							FROM DP.DP WHERE DP.PK = DP_COMPOSITION.DP_FK
								FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS DP
				FROM DP.DP_COMPOSITION
				WHERE DP_COMPOSITION.COMPOSITION_FK = PARENT_COMPOSITION.PK
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS DP_COMPOSITION
		-- ADMIN DOSAGE FORM
		,	(	SELECT ADMIN_DOSAGE_FORM.*
				FROM DOSAGE_FORM AS ADMIN_DOSAGE_FORM
				WHERE ADMIN_DOSAGE_FORM.PK = PARENT_COMPOSITION.ADMIN_DOSAGE_FORM_FK
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS ADMIN_DOSAGE_FORM
		-- MANUFACTURED DOSAGE FORM
		,	(	SELECT MANF_DOSAGE_FORM.*
				FROM DOSAGE_FORM AS MANF_DOSAGE_FORM
				WHERE MANF_DOSAGE_FORM.PK = PARENT_COMPOSITION.MANF_DOSAGE_FORM_FK
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS MANF_DOSAGE_FORM
		-- UNIT OF PRESENTATION
		,	(
				SELECT	UNIT_OF_PRESENTATION.*
				FROM DP.UNIT_OF_PRESENTATION
				WHERE UNIT_OF_PRESENTATION.PK = PARENT_COMPOSITION.UNIT_OF_PRESENTATION_FK
				FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS UNIT_OF_PRESENTATION
		-- ROUTES OF ADMINISTRATION
		,	(
				SELECT	COMPOSITION_ROUTE_OF_ADMINISTRATION.*
					,	(
							SELECT ROUTE_OF_ADMINISTRATION.*
							FROM DP.ROUTE_OF_ADMINISTRATION
							WHERE ROUTE_OF_ADMINISTRATION.PK = COMPOSITION_ROUTE_OF_ADMINISTRATION.ROUTE_OF_ADMINISTRATION_FK
							FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS ROUTE_OF_ADMINISTRATION
				FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION
				WHERE COMPOSITION_ROUTE_OF_ADMINISTRATION.COMPOSITION_FK = PARENT_COMPOSITION.PK
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS COMPOSITION_ROUTE_OF_ADMINISTRATION
		-- CHILD COMPOSITIONS
		,	(
				SELECT	CHILD_COMPOSITION.*
					-- INGREDIENT ROLE
					,	(	SELECT	INGREDIENT_ROLE.*
							FROM DP.INGREDIENT_ROLE
							WHERE INGREDIENT_ROLE.PK = CHILD_COMPOSITION.INGREDIENT_ROLE_FK
								FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS INGREDIENT_ROLE
					-- VARIANTS
					,	(	SELECT	VARIANT.*
							,	(	SELECT	COLOUR.*
									FROM DP.COLOUR
									WHERE COLOUR.PK = VARIANT.COLOUR_FK
										FOR JSON AUTO, INCLUDE_NULL_VALUES
								) AS COLOUR
							,	(	SELECT	FLAVOUR.*
									FROM DP.FLAVOUR
									WHERE FLAVOUR.PK = VARIANT.FLAVOUR_FK
										FOR JSON AUTO, INCLUDE_NULL_VALUES
								) AS FLAVOUR
							FROM DP.VARIANT
							WHERE VARIANT.PK = CHILD_COMPOSITION.VARIANT_FK
								FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS VARIANT
					-- INGREDIENTS
					,	(	SELECT	COMPOSITION_INGREDIENT.*
								,	(	SELECT	SUBSTANCE.*
									,	(	SELECT	SUBSTANCE_CODE.*
										,	(	SELECT	REFERENCE_BODY.*
												FROM DP.REFERENCE_BODY
												WHERE REFERENCE_BODY.PK = SUBSTANCE_CODE.REFERENCE_BODY_FK
													FOR JSON AUTO, INCLUDE_NULL_VALUES
											) AS REFERENCE_BODY
											FROM DP.SUBSTANCE_CODE
											WHERE SUBSTANCE_CODE.SUBSTANCE_FK = SUBSTANCE.PK
												FOR JSON AUTO, INCLUDE_NULL_VALUES
										) AS SUBSTANCE_CODE
										FROM DP.SUBSTANCE
										WHERE SUBSTANCE.PK = COMPOSITION_INGREDIENT.SUBSTANCE_FK
											FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS SUBSTANCE
								,	(	SELECT	INGREDIENT_STRENGTH.*
											,	(	SELECT	STRENGTH_QUALIFIER.*
													FROM STRENGTH_QUALIFIER
													WHERE DP.STRENGTH_QUALIFIER.PK = INGREDIENT_STRENGTH.STRENGTH_QUALIFIER_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS STRENGTH_QUALIFIER
											,	(	SELECT	UNIT.*
													FROM DP.UNIT
													WHERE UNIT.PK = INGREDIENT_STRENGTH.LOW_NUMERATOR_UNIT_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS LOW_NUMERATOR_UNIT
											,	(	SELECT	UNIT.*
													FROM DP.UNIT
													WHERE UNIT.PK = INGREDIENT_STRENGTH.LOW_DENOMINATOR_UNIT_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS LOW_DENOMINATOR_UNIT
											,	(	SELECT	UNIT.*
													FROM DP.UNIT
													WHERE UNIT.PK = INGREDIENT_STRENGTH.HIGH_NUMERATOR_UNIT_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS HIGH_NUMERATOR_UNIT
											,	(	SELECT	UNIT.*
													FROM DP.UNIT
													WHERE UNIT.PK = INGREDIENT_STRENGTH.HIGH_DENOMINATOR_UNIT_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS HIGH_DENOMINATOR_UNIT
										FROM DP.INGREDIENT_STRENGTH
										WHERE INGREDIENT_STRENGTH.COMPOSITION_INGREDIENT_FK = COMPOSITION_INGREDIENT.PK
											FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS INGREDIENT_STRENGTH
								,	(	SELECT	ANIMAL_SOURCED_MATERIAL.*
											,	(	SELECT	MATERIAL_USE.*
													FROM DP.MATERIAL_USE
													WHERE MATERIAL_USE.PK = ANIMAL_SOURCED_MATERIAL.MATERIAL_USE_FK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS MATERIAL_USE
											,	(	SELECT	MATERIAL_SOURCE.*
														,	(	SELECT	VETERINARY_SPECIES.*
																FROM DP.VETERINARY_SPECIES WHERE VETERINARY_SPECIES.PK = MATERIAL_SOURCE.VETERINARY_SPECIES_FK
																	FOR JSON AUTO, INCLUDE_NULL_VALUES
															) AS VETERINARY_SPECIES
														,	(	SELECT	VETERINARY_SUB_SPECIES.*
																FROM DP.VETERINARY_SUB_SPECIES WHERE VETERINARY_SUB_SPECIES.PK = MATERIAL_SOURCE.VETERINARY_SUB_SPECIES_FK
																	FOR JSON AUTO, INCLUDE_NULL_VALUES
															) AS VETERINARY_SUB_SPECIES
														,	(	SELECT	SOURCE_TISSUE.*
																	,	(	SELECT	ANIMAL_TISSUE.*
																			FROM DP.ANIMAL_TISSUE
																			WHERE ANIMAL_TISSUE.PK = SOURCE_TISSUE.ANIMAL_TISSUE_FK
																				FOR JSON AUTO, INCLUDE_NULL_VALUES
																		) AS ANIMAL_TISSUE
																FROM DP.SOURCE_TISSUE
																WHERE SOURCE_TISSUE.MATERIAL_SOURCE_FK = MATERIAL_SOURCE.PK
																	FOR JSON AUTO, INCLUDE_NULL_VALUES
															) AS SOURCE_TISSUE
														,	(	SELECT	ANIMAL_ORIGIN.*
																	,	(	SELECT	COUNTRY.*
																			FROM COMMON.COUNTRY
																			WHERE COUNTRY.PK = ANIMAL_ORIGIN.COUNTRY_FK
																				FOR JSON AUTO, INCLUDE_NULL_VALUES
																		) AS COUNTRY
																FROM DP.ANIMAL_ORIGIN
																WHERE ANIMAL_ORIGIN.MATERIAL_SOURCE_FK = MATERIAL_SOURCE.PK
																	FOR JSON AUTO, INCLUDE_NULL_VALUES
															) AS ANIMAL_ORIGIN
													FROM DP.MATERIAL_SOURCE
													WHERE MATERIAL_SOURCE.ANIMAL_SOURCED_MATERIAL_FK = ANIMAL_SOURCED_MATERIAL.PK
														FOR JSON AUTO, INCLUDE_NULL_VALUES
												) AS MATERIAL_SOURCE
										FROM DP.ANIMAL_SOURCED_MATERIAL
										WHERE ANIMAL_SOURCED_MATERIAL.PK = COMPOSITION_INGREDIENT.ANIMAL_SOURCED_MATERIAL_FK
											FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS ANIMAL_SOURCED_MATERIAL
							FROM DP.COMPOSITION_INGREDIENT
							WHERE COMPOSITION_INGREDIENT.COMPOSITION_FK = CHILD_COMPOSITION.PK
								FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS COMPOSITION_INGREDIENT
				FROM DP.COMPOSITION AS CHILD_COMPOSITION
				WHERE CHILD_COMPOSITION.PARENT_COMPOSITION_FK = PARENT_COMPOSITION.PK
					FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS CHILD_COMPOSITION
	FROM DP.COMPOSITION AS PARENT_COMPOSITION
	WHERE PARENT_COMPOSITION.PK = @PK
		FOR JSON AUTO, INCLUDE_NULL_VALUES, ROOT('PARENT_COMPOSITION')
END
GO

CREATE PROCEDURE [dp].[USP_PROCESS_CHILD_COMPOSITION]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	
	DECLARE @DUMMY BIGINT
	DECLARE @IN_PK BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2
	--
	
	SELECT PK INTO #LOCAL_CHILD_PK FROM #CHILD_COMPOSITION
	-- SELECT * FROM #LOCAL_CHILD_PK -- DEBUG
	WHILE EXISTS (SELECT * FROM #LOCAL_CHILD_PK)
	BEGIN
		DECLARE @PK BIGINT
		DECLARE @DB_PK BIGINT
		SELECT TOP 1 @PK = PK FROM #LOCAL_CHILD_PK
		UPDATE #CHILD_COMPOSITION
			SET PARENT_COMPOSITION_FK = (SELECT DB_PK FROM #KEY_MAP WHERE ENTITY_NAME = 'PARENT_COMPOSITION')
			WHERE PK = @PK
		IF @PK < 0
		BEGIN
			INSERT INTO DP.COMPOSITION (	INGREDIENT_ROLE_FK,
											VARIANT_FK,
											UNIT_OF_PRESENTATION_FK,
											PARENT_COMPOSITION_FK,
											ADMIN_DOSAGE_FORM_FK,
											MANF_DOSAGE_FORM_FK,
											UPDATED_BY,
											COMBINED_DOSAGE_FORM_FK,
											COMPOSITION_NAME,
											COMPOSITION_NAME_USER_OVERRIDE,
											TS )
				SELECT	INGREDIENT_ROLE_FK,
					VARIANT_FK,
					UNIT_OF_PRESENTATION_FK,
					(SELECT DB_PK FROM #KEY_MAP WHERE ENTITY_NAME = 'PARENT_COMPOSITION'),
					ADMIN_DOSAGE_FORM_FK,
					MANF_DOSAGE_FORM_FK,
					UPDATED_BY,
					COMBINED_DOSAGE_FORM_FK,
					COMPOSITION_NAME,
					COMPOSITION_NAME_USER_OVERRIDE,
					(SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
			FROM #CHILD_COMPOSITION WHERE PK = @PK
			SET @DB_PK = SCOPE_IDENTITY()
			-- UPDATE KEY_MAP
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('CHILD_COMPOSITION', @PK, @DB_PK)
			-- PUT BACK PK
			UPDATE #CHILD_COMPOSITION SET PK = @DB_PK WHERE PK = @PK
			-- SIGNAL CHANGE
			EXEC DP.USP_STORE_UPDATE_OCCURED
		END
		ELSE
		BEGIN -- UPDATE EXISTING CHILD COMPOSITION IF A CHANGE IS DETECED
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('CHILD_COMPOSITION', @PK, @PK)
			--
			IF EXISTS (SELECT INGREDIENT_ROLE_FK,
	                    	VARIANT_FK,
	                    	UNIT_OF_PRESENTATION_FK,
	                    	PARENT_COMPOSITION_FK,
	                    	ADMIN_DOSAGE_FORM_FK,
	                    	MANF_DOSAGE_FORM_FK,
	                    	COMBINED_DOSAGE_FORM_FK,
	                    	COMPOSITION_NAME,
	                    	COMPOSITION_NAME_USER_OVERRIDE FROM #CHILD_COMPOSITION WHERE PK = @PK
	                    EXCEPT 
	                    	SELECT INGREDIENT_ROLE_FK,
	                    	VARIANT_FK,
	                    	UNIT_OF_PRESENTATION_FK,
	                    	PARENT_COMPOSITION_FK,
	                    	ADMIN_DOSAGE_FORM_FK,
	                    	MANF_DOSAGE_FORM_FK,
	                    	COMBINED_DOSAGE_FORM_FK,
	                    	COMPOSITION_NAME,
	                    	COMPOSITION_NAME_USER_OVERRIDE FROM DP.COMPOSITION WHERE PK = @PK)
			BEGIN
			  PRINT 'CHILD COMPOSITION RECORD HAS CHANGED'
				UPDATE A
					SET	A.INGREDIENT_ROLE_FK = B.INGREDIENT_ROLE_FK,
						A.VARIANT_FK = B.VARIANT_FK,
						A.UNIT_OF_PRESENTATION_FK = B.UNIT_OF_PRESENTATION_FK,
						A.PARENT_COMPOSITION_FK = B.PARENT_COMPOSITION_FK,
						A.ADMIN_DOSAGE_FORM_FK = B.ADMIN_DOSAGE_FORM_FK,
						A.MANF_DOSAGE_FORM_FK = B.MANF_DOSAGE_FORM_FK,
						A.UPDATED_BY = B.UPDATED_BY,
						A.COMBINED_DOSAGE_FORM_FK = B.COMBINED_DOSAGE_FORM_FK,
						A.COMPOSITION_NAME = B.COMPOSITION_NAME,
						A.COMPOSITION_NAME_USER_OVERRIDE = B.COMPOSITION_NAME_USER_OVERRIDE,
						A.TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
					FROM DP.COMPOSITION A
					INNER JOIN #CHILD_COMPOSITION B ON B.PK = A.PK
					WHERE B.PK = @PK
				-- SIGNAL CHANGE
				EXEC DP.USP_STORE_UPDATE_OCCURED
			END
		END
		
		-- SELECT * FROM #CHILD_COMPOSITION WHERE PK = @PK -- DEBUG
		-- 
		-- PROCESS CHILD WITH @PK = ?
		--
		-- PRINT 'CHILD ' + STR(@PK) -- DEBUG
		-- PUT BACK TS
		UPDATE A
			SET A.TS = B.TS
			FROM #CHILD_COMPOSITION A
			INNER JOIN DP.COMPOSITION B ON B.PK = A.PK
			WHERE A.PK = @PK
		--
		-- SELECT * FROM #PARENT_COMPOSITION -- DEBUG
		-- SELECT * FROM #KEY_MAP -- DEBUG
		
		-- PLACE LOGIC ABOVE THIS LINE
		DELETE #LOCAL_CHILD_PK WHERE PK = @PK
	END
	DROP TABLE #LOCAL_CHILD_PK
	--
	SELECT PK INTO #CHILD_COMPOSITION_TO_DELETE FROM DP.COMPOSITION WHERE PARENT_COMPOSITION_FK = (SELECT PK FROM #PARENT_COMPOSITION)
	EXCEPT
	SELECT PK FROM #CHILD_COMPOSITION
	--
	SELECT 'CHILD_COMPOSITION_TO_DELETE' AS X, * FROM #CHILD_COMPOSITION_TO_DELETE -- DEBUG
	--
	--
	DELETE DP.INGREDIENT_STRENGTH WHERE COMPOSITION_INGREDIENT_FK IN
		(SELECT PK FROM DP.COMPOSITION_INGREDIENT WHERE COMPOSITION_FK IN
			(SELECT PK FROM #CHILD_COMPOSITION_TO_DELETE))
	DELETE DP.COMPOSITION_INGREDIENT WHERE COMPOSITION_FK IN
		(SELECT PK FROM #CHILD_COMPOSITION_TO_DELETE)
	DELETE DP.COMPOSITION WHERE PK IN
		(SELECT PK FROM #CHILD_COMPOSITION_TO_DELETE)
	IF EXISTS (SELECT 1 FROM #CHILD_COMPOSITION_TO_DELETE) -- (@@ROWCOUNT > 0)
	BEGIN
		EXEC DP.USP_STORE_UPDATE_OCCURED
	END 
	--
	DROP TABLE #CHILD_COMPOSITION_TO_DELETE
		
END
GO

CREATE PROCEDURE [dp].[USP_PROCESS_COMPOSITION_INGREDIENT]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	
	DECLARE @DUMMY BIGINT
	DECLARE @IN_PK BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2
	--
	--
	SELECT * FROM #COMPOSITION_INGREDIENT -- DEBUG
	SELECT * INTO #LOCAL_COMPOSITION_INGREDIENT FROM #COMPOSITION_INGREDIENT ORDER BY ISNULL(PARENT_COMPOSITION_INGREDIENT_FK, -9999999999)
	-- SELECT * FROM #LOCAL_CHILD_PK -- DEBUG
	WHILE EXISTS (SELECT * FROM #LOCAL_COMPOSITION_INGREDIENT)
	BEGIN
		DECLARE @PK BIGINT
		DECLARE @DB_PK BIGINT
		SELECT TOP 1 @PK = PK FROM #LOCAL_COMPOSITION_INGREDIENT ORDER BY ISNULL(PARENT_COMPOSITION_INGREDIENT_FK, -9999999999)
		UPDATE #COMPOSITION_INGREDIENT
			SET COMPOSITION_FK = (	SELECT DB_PK
									FROM #KEY_MAP
									WHERE ENTITY_NAME = 'CHILD_COMPOSITION'
									AND IN_PK = #COMPOSITION_INGREDIENT.COMPOSITION_FK),
				PARENT_COMPOSITION_INGREDIENT_FK = (SELECT DB_PK FROM #KEY_MAP
													WHERE ENTITY_NAME = 'COMPOSITION_INGREDIENT' 
													AND IN_PK = #COMPOSITION_INGREDIENT.PARENT_COMPOSITION_INGREDIENT_FK)
			WHERE PK = @PK
		IF @PK < 0
		BEGIN
			INSERT INTO DP.COMPOSITION_INGREDIENT (	PARENT_COMPOSITION_INGREDIENT_FK,
													NOTES,
													RM_BASE,
													SEQ,
													ANIMAL_SOURCED_MATERIAL_FK,
													COMPOSITION_FK,
													PHARMACEUTICAL_STANDARD_FK,
													SUBSTANCE_FK,
													UPDATED_BY,
													TS,
													NANOMATERIAL_FK,
													NANOMATERIAL_NOTES )
				SELECT	PARENT_COMPOSITION_INGREDIENT_FK,
						NOTES,
						RM_BASE,
						SEQ,
						ANIMAL_SOURCED_MATERIAL_FK,
						COMPOSITION_FK,
						PHARMACEUTICAL_STANDARD_FK,
						SUBSTANCE_FK,
						UPDATED_BY,
						(SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS'),
						NANOMATERIAL_FK,
						NANOMATERIAL_NOTES
			FROM #COMPOSITION_INGREDIENT WHERE PK = @PK
			SET @DB_PK = SCOPE_IDENTITY()
			-- UPDATE KEY_MAP
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('COMPOSITION_INGREDIENT', @PK, @DB_PK)
			-- PUT BACK PK
			UPDATE #COMPOSITION_INGREDIENT SET PK = @DB_PK WHERE PK = @PK
			-- SIGNAL CHANGE
			EXEC DP.USP_STORE_UPDATE_OCCURED
		END
		ELSE
		BEGIN -- UPDATE EXISTING CHILD COMPOSITION IF A CHANGE IS DETECED
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('COMPOSITION_INGREDIENT', @PK, @PK)
			-- SELECT * FROM #KEY_MAP -- DEBUG
			--
			IF EXISTS (SELECT	PK,
								PARENT_COMPOSITION_INGREDIENT_FK,
								NOTES,
								RM_BASE,
								SEQ,
								ANIMAL_SOURCED_MATERIAL_FK,
								COMPOSITION_FK,
								PHARMACEUTICAL_STANDARD_FK,
								SUBSTANCE_FK,
								UPDATED_BY,
								NANOMATERIAL_FK,
								NANOMATERIAL_NOTES FROM #COMPOSITION_INGREDIENT WHERE PK = @PK
	                    EXCEPT 
	                    SELECT	PK,
								PARENT_COMPOSITION_INGREDIENT_FK,
								NOTES,
								RM_BASE,
								SEQ,
								ANIMAL_SOURCED_MATERIAL_FK,
								COMPOSITION_FK,
								PHARMACEUTICAL_STANDARD_FK,
								SUBSTANCE_FK,
								UPDATED_BY,
								NANOMATERIAL_FK,
								NANOMATERIAL_NOTES FROM DP.COMPOSITION_INGREDIENT WHERE PK = @PK)
			BEGIN
			  PRINT 'COMPOSITION INGREDIENT RECORD HAS CHANGED'
				UPDATE A
					SET	A.PARENT_COMPOSITION_INGREDIENT_FK = B.PARENT_COMPOSITION_INGREDIENT_FK,
						A.NOTES = B.NOTES,
						A.RM_BASE = B.RM_BASE,
						A.SEQ = B.SEQ,
						A.ANIMAL_SOURCED_MATERIAL_FK = B.ANIMAL_SOURCED_MATERIAL_FK,
						A.COMPOSITION_FK = B.COMPOSITION_FK,
						A.PHARMACEUTICAL_STANDARD_FK = B.PHARMACEUTICAL_STANDARD_FK,
						A.SUBSTANCE_FK = B.SUBSTANCE_FK,
						A.UPDATED_BY = B.UPDATED_BY,
						A.NANOMATERIAL_FK = B.NANOMATERIAL_FK,
						A.NANOMATERIAL_NOTES = B.NANOMATERIAL_NOTES,
						A.TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
					FROM DP.COMPOSITION_INGREDIENT A
					INNER JOIN #COMPOSITION_INGREDIENT B ON B.PK = A.PK
					WHERE B.PK = @PK
				-- SIGNAL CHANGE
				EXEC DP.USP_STORE_UPDATE_OCCURED
			END
		END
		
		-- SELECT * FROM #COMPOSITION_INGREDIENT WHERE PK = @PK -- DEBUG
		-- 
		-- PROCESS COMPOSITION_INGREDIENT WITH @PK = ?
		--
		-- PRINT 'COMPOSITION_INGREDIENT ' + STR(@PK) -- DEBUG
		-- PUT BACK TS
		UPDATE A
			SET A.TS = B.TS
			FROM #COMPOSITION_INGREDIENT A
			INNER JOIN DP.COMPOSITION_INGREDIENT B ON B.PK = A.PK
			WHERE A.PK = @PK
		--
		-- SELECT * FROM #PARENT_COMPOSITION -- DEBUG
		-- SELECT * FROM #KEY_MAP -- DEBUG
		
		-- PLACE LOGIC ABOVE THIS LINE
		DELETE #LOCAL_COMPOSITION_INGREDIENT WHERE PK = @PK
	END
	DROP TABLE #LOCAL_COMPOSITION_INGREDIENT
	
	--
	SELECT PK INTO #COMPOSITION_INGREDIENT_TO_DELETE FROM DP.COMPOSITION_INGREDIENT WHERE COMPOSITION_FK IN 
		(SELECT PK FROM DP.COMPOSITION WHERE PK IN (SELECT PK FROM DP.COMPOSITION WHERE PARENT_COMPOSITION_FK = (SELECT PK FROM #PARENT_COMPOSITION)))
	EXCEPT
	SELECT PK FROM #COMPOSITION_INGREDIENT
	--
	-- SELECT 'COMPOSITION_INGREDIENT_TO_DELETE' AS X, * FROM #COMPOSITION_INGREDIENT_TO_DELETE -- DEBUG
	--
	DELETE DP.INGREDIENT_STRENGTH WHERE COMPOSITION_INGREDIENT_FK IN (SELECT PK FROM #COMPOSITION_INGREDIENT_TO_DELETE)
	--
	DELETE DP.COMPOSITION_INGREDIENT WHERE PK IN (SELECT PK FROM #COMPOSITION_INGREDIENT_TO_DELETE)
	--
	-- SIGNAL CHANGE IF ROWS WERE DELETED
	IF EXISTS (SELECT 1 FROM #COMPOSITION_INGREDIENT_TO_DELETE) -- IF (@@ROWCOUNT > 0)
	BEGIN
		EXEC DP.USP_STORE_UPDATE_OCCURED
	END
	--
	DROP TABLE #COMPOSITION_INGREDIENT_TO_DELETE
	--

		
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<PROCESS COMPOSITION_NAME COMPONENT OF THE JSON MESSAGE>
-- =============================================
CREATE PROCEDURE [dp].[USP_PROCESS_COMPOSITION_NAME]
	@COMPOSITION_NAME dp.TT_COMPOSITION_NAME READONLY,
	@TS DATETIME2,
	@PK BIGINT OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	-- GET DATA
	DECLARE @DP_COMPOSITION_NAME_PK BIGINT
	DECLARE	@DP_COMPOSITION_NAME_TS DATETIME2
	DECLARE	@DP_COMPOSITION_NAME_COMPOSITION_NAME NVARCHAR(4000)
	DECLARE	@DP_COMPOSITION_NAME_UPDATED_BY NVARCHAR(200)
	--
	SELECT	@DP_COMPOSITION_NAME_PK = PK
		,	@DP_COMPOSITION_NAME_TS = TS
		,	@DP_COMPOSITION_NAME_COMPOSITION_NAME = COMPOSITION_NAME
		,	@DP_COMPOSITION_NAME_UPDATED_BY = UPDATED_BY
	FROM @COMPOSITION_NAME 
	-- SANITY CHECKS
	IF @DP_COMPOSITION_NAME_PK >= 0
	BEGIN
		PRINT @DP_COMPOSITION_NAME_PK
		PRINT @DP_COMPOSITION_NAME_TS
		IF EXISTS (	SELECT DISTINCT 1
					FROM DP.COMPOSITION_NAME
					WHERE PK = @DP_COMPOSITION_NAME_PK
					AND TS <> @DP_COMPOSITION_NAME_TS )
		BEGIN
			THROW 50001, @DP_COMPOSITION_NAME_PK, 0
		END
		IF NOT EXISTS (	SELECT DISTINCT 1
						FROM DP.COMPOSITION_NAME
						WHERE PK = @DP_COMPOSITION_NAME_PK )
		BEGIN
			THROW 50003, @DP_COMPOSITION_NAME_PK, 0
		END	
	END

	-- PROCESS COMPOSITION NAME
	IF @DP_COMPOSITION_NAME_PK < 0
	BEGIN -- CREATE COMPOSITION NAME
		INSERT INTO DP.COMPOSITION_NAME (COMPOSITION_NAME, UPDATED_BY, TS)
			VALUES (@DP_COMPOSITION_NAME_COMPOSITION_NAME, @DP_COMPOSITION_NAME_UPDATED_BY, @TS)
		SET @PK = SCOPE_IDENTITY()
	END
	ELSE -- UPDATE COMPOSITION NAME
	BEGIN
		UPDATE DP.COMPOSITION_NAME SET
			COMPOSITION_NAME = @DP_COMPOSITION_NAME_COMPOSITION_NAME,
			UPDATED_BY = @DP_COMPOSITION_NAME_UPDATED_BY,
			TS = @TS
			WHERE PK = @DP_COMPOSITION_NAME_PK
	END
	RETURN
END
GO

CREATE PROCEDURE [dp].[USP_PROCESS_COMPOSITION_ROUTE_OF_ADMINISTRATION]
AS
-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<PROCESS COMPOSITION_ROUTE_OF_ADMINISTRATION COMPONENT OF THE JSON MESSAGE>
-- =============================================
BEGIN
	SET NOCOUNT ON
	--
	SELECT 'temp' as x, * FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION -- DEBUG
	SELECT 'perm' as x, * FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK IN (SELECT PK FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION) -- DEBUG
	--
	DECLARE @DUMMY BIGINT
	DECLARE @IN_PK BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2
	--
	SELECT * INTO #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION
	-- SELECT * FROM #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION -- DEBUG
	WHILE EXISTS (SELECT * FROM #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION)
	BEGIN
		DECLARE @PK BIGINT
		DECLARE @DB_PK BIGINT
		SELECT TOP 1 @PK = PK FROM #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION
		--
		UPDATE #COMPOSITION_ROUTE_OF_ADMINISTRATION
			SET COMPOSITION_FK = (SELECT DB_PK FROM #KEY_MAP WHERE ENTITY_NAME = 'PARENT_COMPOSITION')
			WHERE PK = @PK
		--
		IF @PK < 0
		BEGIN
			INSERT INTO DP.COMPOSITION_ROUTE_OF_ADMINISTRATION	(	ROUTE_OF_ADMINISTRATION_FK,
																	TS,
																	UPDATED_BY,
																	COMPOSITION_FK )
				SELECT	ROUTE_OF_ADMINISTRATION_FK,
						(SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS'),
						UPDATED_BY,
						COMPOSITION_FK
				FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK = @PK
			SET @DB_PK = SCOPE_IDENTITY()
			-- UPDATE KEY_MAP
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('COMPOSITION_ROUTE_OF_ADMINISTRATION', @PK, @DB_PK)
			-- PUT BACK PK
			UPDATE #COMPOSITION_ROUTE_OF_ADMINISTRATION SET PK = @DB_PK WHERE PK = @PK
			--
			PRINT 'COMPOSITION_ROUTE_OF_ADMINISTRATION RECORD WAS ADDED' -- DEBUG
			-- SIGNAL CHANGE
			EXEC DP.USP_STORE_UPDATE_OCCURED
		END
		ELSE
		BEGIN
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('COMPOSITION_ROUTE_OF_ADMINISTRATION', @PK, @PK)
			IF EXISTS (	SELECT	ROUTE_OF_ADMINISTRATION_FK,
								COMPOSITION_FK
							FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK = @PK
						EXCEPT
						SELECT	ROUTE_OF_ADMINISTRATION_FK,
								COMPOSITION_FK
							FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK = @PK )
			BEGIN
				PRINT 'COMPOSITION_ROUTE_OF_ADMINISTRATION RECORD HAS CHANGED' -- DEBUG
				UPDATE A
					SET	A.ROUTE_OF_ADMINISTRATION_FK = B.ROUTE_OF_ADMINISTRATION_FK,
						A.TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS'),
						A.UPDATED_BY = B.UPDATED_BY,
						A.COMPOSITION_FK = B.COMPOSITION_FK
					FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION A
					INNER JOIN #COMPOSITION_ROUTE_OF_ADMINISTRATION B ON B.PK = A.PK
					WHERE B.PK = @PK
				-- SIGNAL CHANGE
				EXEC DP.USP_STORE_UPDATE_OCCURED
			END
		END
		--
		UPDATE A
				SET A.TS = B.TS
				FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION A
				INNER JOIN DP.COMPOSITION_ROUTE_OF_ADMINISTRATION B ON B.PK = A.PK
				WHERE A.PK = @PK
		--
		--
		DELETE #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK = @PK
	END
	--
	DROP TABLE #LOCAL_COMPOSITION_ROUTE_OF_ADMINISTRATION
	--
	SELECT PK, COMPOSITION_FK, ROUTE_OF_ADMINISTRATION_FK INTO #COMPOSITION_ROE_TO_DELETE
	FROM DP.COMPOSITION_ROUTE_OF_ADMINISTRATION
	WHERE COMPOSITION_FK IN (SELECT PK FROM #PARENT_COMPOSITION)
	EXCEPT
	SELECT PK, COMPOSITION_FK, ROUTE_OF_ADMINISTRATION_FK
	FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION 
	--
	SELECT * FROM #COMPOSITION_ROE_TO_DELETE -- DEBUG
	--
	DELETE DP.COMPOSITION_ROUTE_OF_ADMINISTRATION WHERE PK IN (SELECT PK FROM #COMPOSITION_ROE_TO_DELETE)
	PRINT 'DELETED COMPOSITION_ROUTE_OF_ADMINISTRATION ROWS = ' + STR(@@ROWCOUNT)
	--
	IF EXISTS (SELECT 1 FROM #COMPOSITION_ROE_TO_DELETE)
	BEGIN
		-- SIGNAL CHANGE
		EXEC DP.USP_STORE_UPDATE_OCCURED
	END
	--
	DROP TABLE #COMPOSITION_ROE_TO_DELETE
END
GO

CREATE PROCEDURE [dp].[USP_PROCESS_INGREDIENT_STRENGTH]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	
	DECLARE @DUMMY BIGINT
	DECLARE @IN_PK BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2
	--
	
	SELECT * INTO #LOCAL_INGREDIENT_STRENGTH FROM #INGREDIENT_STRENGTH
	WHILE EXISTS (SELECT * FROM #LOCAL_INGREDIENT_STRENGTH)
	BEGIN
		DECLARE @PK BIGINT
		DECLARE @DB_PK BIGINT
		SELECT TOP 1 @PK = PK FROM #LOCAL_INGREDIENT_STRENGTH
		UPDATE #INGREDIENT_STRENGTH
			SET COMPOSITION_INGREDIENT_FK = (SELECT DB_PK FROM #KEY_MAP 
												WHERE ENTITY_NAME = 'COMPOSITION_INGREDIENT'
												AND IN_PK = #INGREDIENT_STRENGTH.COMPOSITION_INGREDIENT_FK)
			WHERE PK = @PK
		-- SELECT * FROM #KEY_MAP -- DEBUG
		-- SELECT * FROM #INGREDIENT_STRENGTH -- DEBUG
		IF @PK < 0
		BEGIN
			INSERT INTO DP.INGREDIENT_STRENGTH	 (	LOW_NUMERATOR_VALUE,
													LOW_NUMERATOR_UNIT_FK,
													LOW_DENOMINATOR_VALUE,
													LOW_DENOMINATOR_UNIT_FK,
													HIGH_NUMERATOR_VALUE,
													HIGH_NUMERATOR_UNIT_FK,
													HIGH_DENOMINATOR_VALUE,
													HIGH_DENOMINATOR_UNIT_FK,
													COMPOSITION_INGREDIENT_FK,
													STRENGTH_QUALIFIER_FK,
													STRENGTH_TYPE_FK,
													UPDATED_BY,
													TS,
													USE_UNIT_OF_PRESENTATION )
				SELECT	LOW_NUMERATOR_VALUE,
						LOW_NUMERATOR_UNIT_FK,
						LOW_DENOMINATOR_VALUE,
						LOW_DENOMINATOR_UNIT_FK,
						HIGH_NUMERATOR_VALUE,
						HIGH_NUMERATOR_UNIT_FK,
						HIGH_DENOMINATOR_VALUE,
						HIGH_DENOMINATOR_UNIT_FK,
						COMPOSITION_INGREDIENT_FK,
						STRENGTH_QUALIFIER_FK,
						STRENGTH_TYPE_FK,
						UPDATED_BY,
						(SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS'),
						USE_UNIT_OF_PRESENTATION
			FROM #INGREDIENT_STRENGTH WHERE PK = @PK
			SET @DB_PK = SCOPE_IDENTITY()
			-- UPDATE KEY_MAP
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('INGREDIENT_STRENGTH', @PK, @DB_PK)
			-- PUT BACK PK
			UPDATE #INGREDIENT_STRENGTH SET PK = @DB_PK WHERE PK = @PK
			-- SIGNAL CHANGE
			EXEC DP.USP_STORE_UPDATE_OCCURED
		END
		ELSE
		BEGIN -- UPDATE EXISTING CHILD COMPOSITION IF A CHANGE IS DETECED
			INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('INGREDIENT_STRENGTH', @PK, @PK)
			--
			IF EXISTS (SELECT	LOW_NUMERATOR_VALUE,
								LOW_NUMERATOR_UNIT_FK,
								LOW_DENOMINATOR_VALUE,
								LOW_DENOMINATOR_UNIT_FK,
								HIGH_NUMERATOR_VALUE,
								HIGH_NUMERATOR_UNIT_FK,
								HIGH_DENOMINATOR_VALUE,
								HIGH_DENOMINATOR_UNIT_FK,
								COMPOSITION_INGREDIENT_FK,
								STRENGTH_QUALIFIER_FK,
								STRENGTH_TYPE_FK,
								UPDATED_BY,
								USE_UNIT_OF_PRESENTATION FROM #INGREDIENT_STRENGTH WHERE PK = @PK
	                    EXCEPT 
	                    	SELECT	LOW_NUMERATOR_VALUE,
									LOW_NUMERATOR_UNIT_FK,
									LOW_DENOMINATOR_VALUE,
									LOW_DENOMINATOR_UNIT_FK,
									HIGH_NUMERATOR_VALUE,
									HIGH_NUMERATOR_UNIT_FK,
									HIGH_DENOMINATOR_VALUE,
									HIGH_DENOMINATOR_UNIT_FK,
									COMPOSITION_INGREDIENT_FK,
									STRENGTH_QUALIFIER_FK,
									STRENGTH_TYPE_FK,
									UPDATED_BY,
									USE_UNIT_OF_PRESENTATION FROM DP.INGREDIENT_STRENGTH WHERE PK = @PK)
			BEGIN
			  PRINT 'INGREDIENT STRENGTH RECORD HAS CHANGED'
				UPDATE A
					SET	A.LOW_NUMERATOR_VALUE = B.LOW_NUMERATOR_VALUE,
						A.LOW_NUMERATOR_UNIT_FK = B.LOW_NUMERATOR_UNIT_FK,
						A.LOW_DENOMINATOR_VALUE = B.LOW_DENOMINATOR_VALUE,
						A.LOW_DENOMINATOR_UNIT_FK = B.LOW_DENOMINATOR_UNIT_FK,
						A.HIGH_NUMERATOR_VALUE = B.HIGH_NUMERATOR_VALUE,
						A.HIGH_NUMERATOR_UNIT_FK = B.HIGH_NUMERATOR_UNIT_FK,
						A.HIGH_DENOMINATOR_VALUE = B.HIGH_DENOMINATOR_VALUE,
						A.HIGH_DENOMINATOR_UNIT_FK = B.HIGH_DENOMINATOR_UNIT_FK,
						A.COMPOSITION_INGREDIENT_FK = B.COMPOSITION_INGREDIENT_FK,
						A.STRENGTH_QUALIFIER_FK = B.STRENGTH_QUALIFIER_FK,
						A.STRENGTH_TYPE_FK = B.STRENGTH_TYPE_FK,
						A.UPDATED_BY = B.UPDATED_BY,
						A.TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS'),
						A.USE_UNIT_OF_PRESENTATION = B.USE_UNIT_OF_PRESENTATION
					FROM DP.INGREDIENT_STRENGTH A
					INNER JOIN #INGREDIENT_STRENGTH B ON B.PK = A.PK
					WHERE B.PK = @PK
				-- SIGNAL CHANGE
				EXEC DP.USP_STORE_UPDATE_OCCURED
			END
		END
		
		-- SELECT * FROM #INGREDIENT_STRENGTH WHERE PK = @PK -- DEBUG
		-- 
		-- PROCESS CHILD WITH @PK = ?
		--
		-- PRINT 'CHILD ' + STR(@PK) -- DEBUG
		-- PUT BACK TS
		UPDATE A
			SET A.TS = B.TS
			FROM #INGREDIENT_STRENGTH A
			INNER JOIN DP.INGREDIENT_STRENGTH B ON B.PK = A.PK
			WHERE A.PK = @PK
		--
		-- SELECT * FROM #PARENT_COMPOSITION -- DEBUG
		-- SELECT * FROM #KEY_MAP -- DEBUG
		
		-- PLACE LOGIC ABOVE THIS LINE
		DELETE #LOCAL_INGREDIENT_STRENGTH WHERE PK = @PK
		--
		--
	END
	DROP TABLE #LOCAL_INGREDIENT_STRENGTH
	--
	--
		
END
GO

CREATE PROCEDURE [dp].[USP_PROCESS_PARENT_COMPOSITION]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @DB_PK BIGINT
	DECLARE @DUMMY BIGINT
	DECLARE @IN_PK BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2
	SELECT @IN_PK = PK,  @IN_TS = TS FROM #PARENT_COMPOSITION
	SELECT @DB_TS = TS FROM DP.COMPOSITION WHERE PK = @IN_PK

	IF @IN_PK < 0
	BEGIN
		INSERT INTO DP.COMPOSITION (INGREDIENT_ROLE_FK,
									VARIANT_FK,
									UNIT_OF_PRESENTATION_FK,
									PARENT_COMPOSITION_FK,
									ADMIN_DOSAGE_FORM_FK,
									MANF_DOSAGE_FORM_FK,
									UPDATED_BY,
									COMBINED_DOSAGE_FORM_FK,
									COMPOSITION_NAME,
									COMPOSITION_NAME_USER_OVERRIDE,
									TS)
			SELECT	INGREDIENT_ROLE_FK,
					VARIANT_FK,
					UNIT_OF_PRESENTATION_FK,
					PARENT_COMPOSITION_FK,
					ADMIN_DOSAGE_FORM_FK,
					MANF_DOSAGE_FORM_FK,
					UPDATED_BY,
					COMBINED_DOSAGE_FORM_FK,
					COMPOSITION_NAME,
					COMPOSITION_NAME_USER_OVERRIDE,
					(SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
			FROM #PARENT_COMPOSITION
		SET @DB_PK = SCOPE_IDENTITY()
		-- UPDATE KEY_MAP
		INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('PARENT_COMPOSITION', @IN_PK, @DB_PK)
		-- PUT BACK PK
		UPDATE #PARENT_COMPOSITION SET PK = @DB_PK
		-- SIGNAL CHANGE
		EXEC DP.USP_STORE_UPDATE_OCCURED
	END
	ELSE
	BEGIN
		INSERT INTO #KEY_MAP (ENTITY_NAME, IN_PK, DB_PK) VALUES ('PARENT_COMPOSITION', @IN_PK, @IN_PK)
		-- UPDATE EXISTING COMPOSITION IF A CHANGE IS DETECED
		IF EXISTS (SELECT INGREDIENT_ROLE_FK,
                    	VARIANT_FK,
                    	UNIT_OF_PRESENTATION_FK,
                    	PARENT_COMPOSITION_FK,
                    	ADMIN_DOSAGE_FORM_FK,
                    	MANF_DOSAGE_FORM_FK,
                    	COMBINED_DOSAGE_FORM_FK,
                    	COMPOSITION_NAME,
                    	COMPOSITION_NAME_USER_OVERRIDE FROM #PARENT_COMPOSITION
                    	 EXCEPT 
                    	SELECT INGREDIENT_ROLE_FK,
                    	VARIANT_FK,
                    	UNIT_OF_PRESENTATION_FK,
                    	PARENT_COMPOSITION_FK,
                    	ADMIN_DOSAGE_FORM_FK,
                    	MANF_DOSAGE_FORM_FK,
                    	COMBINED_DOSAGE_FORM_FK,
                    	COMPOSITION_NAME,
                    	COMPOSITION_NAME_USER_OVERRIDE FROM DP.COMPOSITION WHERE PK = @IN_PK)
		BEGIN
		  PRINT 'PARENT COMPOSITION RECORD HAS CHANGED'
			UPDATE A
				SET	A.INGREDIENT_ROLE_FK = B.INGREDIENT_ROLE_FK,
					A.VARIANT_FK = B.VARIANT_FK,
					A.UNIT_OF_PRESENTATION_FK = B.UNIT_OF_PRESENTATION_FK,
					A.PARENT_COMPOSITION_FK = B.PARENT_COMPOSITION_FK,
					A.ADMIN_DOSAGE_FORM_FK = B.ADMIN_DOSAGE_FORM_FK,
					A.MANF_DOSAGE_FORM_FK = B.MANF_DOSAGE_FORM_FK,
					A.UPDATED_BY = B.UPDATED_BY,
					A.COMBINED_DOSAGE_FORM_FK = B.COMBINED_DOSAGE_FORM_FK,
					A.COMPOSITION_NAME = B.COMPOSITION_NAME,
					A.COMPOSITION_NAME_USER_OVERRIDE = B.COMPOSITION_NAME_USER_OVERRIDE,
					A.TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
				FROM DP.COMPOSITION A
				INNER JOIN #PARENT_COMPOSITION B ON B.PK = A.PK
			-- SIGNAL CHANGE
			EXEC DP.USP_STORE_UPDATE_OCCURED
		END
	END
	-- PUT BACK TS
	UPDATE A
		SET A.TS = B.TS
		FROM #PARENT_COMPOSITION A
		INNER JOIN DP.COMPOSITION B ON B.PK = A.PK
	--
	-- SELECT * FROM #PARENT_COMPOSITION -- DEBUG
	-- SELECT * FROM #KEY_MAP -- DEBUG
	-- SELECT * FROM #SP_COMMUNICATION -- DEBUG
			
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<PROCESS BO COMPOSITION JSON MESSAGE>
-- =============================================
CREATE PROCEDURE [dp].[USP_PUT_BO_COMPOSITION]
	@JSON_MESSAGE NVARCHAR(MAX),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	-- START OF TRANSACTION
	
	-- BO VARIABLES
	DECLARE @TS DATETIME2 = GETDATE() -- TIMESTAMP TO STORE FOR NEW AND MODIFIED ROWS
	DECLARE @BO NVARCHAR(200) = 'COMPOSITION'
	DECLARE @PK BIGINT -- COMPOSITION NAME PK
	-- TABLE VARIABLES
	DECLARE @COMPOSITION_NAME dp.TT_COMPOSITION_NAME
	DECLARE @COMPOSITION_ROUTE_OF_ADMINISTRATION dp.TT_COMPOSITION_ROUTE_OF_ADMINISTRATION
	
	-- CHECK IF VALID JSON MESSAGE
	IF ISJSON(@JSON_MESSAGE) != 1
	BEGIN
		 SET @RESULT = common.UDF_GET_RESULT(DEFAULT, 'COMPOSITION_NAME', 50002, DEFAULT, DEFAULT, DEFAULT)
		 ROLLBACK
		 RETURN
	END

	-- SHRED THE COMPOSITION JSON MESSAGE -- OUTPUT IN TABLE @BO_COMPOSITION
	DECLARE @BO_COMPOSITION dp.TT_BO_COMPOSITION
	INSERT INTO @BO_COMPOSITION EXEC DP.USP_SHRED_BO_COMPOSITION @JSON_MESSAGE
	-- SELECT * FROM @BO_COMPOSITION
	-- SHRED COMPOSITION_ROUTE_OF_ADMINISTRATION
	INSERT INTO @COMPOSITION_ROUTE_OF_ADMINISTRATION EXEC DP.USP_SHRED_COMPOSITION_ROUTE_OF_ADMINISTRATION @JSON_MESSAGE
	SELECT * FROM @COMPOSITION_ROUTE_OF_ADMINISTRATION
	-- SHRED COMPOSITION_NAME
	INSERT INTO @COMPOSITION_NAME EXEC [dp].[USP_SHRED_COMPOSITION_NAME] @JSON_MESSAGE
	SELECT * FROM @COMPOSITION_NAME

	BEGIN TRY
		BEGIN TRANSACTION
		EXEC DP.USP_PROCESS_COMPOSITION_NAME @COMPOSITION_NAME, @TS, @PK OUTPUT
		EXEC DP.USP_PROCESS_COMPOSITION_ROUTE_OF_ADMINISTRATION @COMPOSITION_ROUTE_OF_ADMINISTRATION, @TS, @PK
		SET @RESULT = common.UDF_GET_RESULT(@PK, @BO, DEFAULT, DEFAULT, DEFAULT, @TS)
		COMMIT TRANSACTION
		RETURN
	END TRY
	BEGIN CATCH
		ROLLBACK TRANSACTION
		PRINT 'IN CATCH BLOCK'
		SET @RESULT = common.UDF_GET_RESULT(ERROR_MESSAGE(), @BO, ERROR_NUMBER(), DEFAULT, DEFAULT, DEFAULT)
	END CATCH

	RETURN

END
GO

CREATE PROCEDURE [dp].[USP_PUT_PARENT_COMPOSITION]
	@JSON_MESSAGE NVARCHAR(MAX),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	-- SET IMPLICIT_TRANSACTIONS ON
	--
	BEGIN TRY
		BEGIN TRANSACTION
		-- BO VARIABLES
		DECLARE @TS DATETIME2 -- BO TS AFTER INSERT OR UPDATE TO RETURN TO CALLING PROCEDURE IF EXECUTION WENT SUCCESSFUL
		DECLARE @PK BIGINT -- COMPOSITION PK
		DECLARE @BO NVARCHAR(400) = 'PARENT_COMPOSITION'
		DECLARE @RETRIEVED_TS DATETIME2 -- WHAT COMES BACK FROM THE DATABASE
		DECLARE @ERROR_CODE INT
		DECLARE @DUMMY INT
		-- TABLE VARIABLES
		DECLARE @PARENT_COMPOSITION dp.TT_COMPOSITION
		DECLARE @CHILD_COMPOSITION dp.TT_COMPOSITION
		DECLARE @COMPOSITION_ROUTE_OF_ADMINISTRATION dp.TT_COMPOSITION_ROUTE_OF_ADMINISTRATION
		DECLARE @DP_COMPOSITION DP.TT_DP_COMPOSITION
		DECLARE @COMPOSITION_INGREDIENT DP.TT_COMPOSITION_INGREDIENT
		DECLARE @INGREDIENT_STRENGTH DP.TT_INGREDIENT_STRENGTH
		DECLARE @VARIANT DP.TT_VARIANT
		DECLARE @SP_COMMUNICATION COMMON.TT_SP_COMMUNICATION
		DECLARE @KEY_MAP COMMON.TT_KEY_MAP
		-- TEMPORARY TABLES
		SELECT * INTO #PARENT_COMPOSITION FROM @PARENT_COMPOSITION
		SELECT * INTO #CHILD_COMPOSITION FROM @CHILD_COMPOSITION
		SELECT * INTO #COMPOSITION_ROUTE_OF_ADMINISTRATION FROM @COMPOSITION_ROUTE_OF_ADMINISTRATION
		SELECT * INTO #COMPOSITION_INGREDIENT FROM @COMPOSITION_INGREDIENT
		SELECT * INTO #DP_COMPOSITION FROM @DP_COMPOSITION
		SELECT * INTO #INGREDIENT_STRENGTH FROM @INGREDIENT_STRENGTH
		SELECT * INTO #VARIANT FROM @VARIANT
		SELECT * INTO #SP_COMMUNICATION FROM @SP_COMMUNICATION
		SELECT * INTO #KEY_MAP FROM @KEY_MAP
		-- TIMESTAMP TO BE USED EVERYWHERE AN INSERT OR UPDATE IS DONE
		INSERT INTO #SP_COMMUNICATION (KEY_STRING, VALUE_DATE) VALUES ('TS', GETDATE())
		-- CHECK IF VALID JSON MESSAGE
		IF ISJSON(@JSON_MESSAGE) != 1
		BEGIN
			SET @RESULT = common.UDF_GET_RESULT(@PK, @BO, 50002, DEFAULT, DEFAULT, DEFAULT)
			;THROW 50002, 'Invalid JSON payload', 0
			RETURN
		END
		-- SHRED JSON MESSAGE
		EXEC DP.USP_SHRED_PARENT_COMPOSITION @JSON_MESSAGE
		-- SELECT * FROM  #PARENT_COMPOSITION -- DEBUG
		EXEC DP.USP_SHRED_CHILD_COMPOSITION @JSON_MESSAGE
		-- SELECT * FROM #CHILD_COMPOSITION -- DEBUG
		EXEC DP.USP_SHRED_COMPOSITION_ROUTE_OF_ADMINISTRATION @JSON_MESSAGE
		-- SELECT * FROM #COMPOSITION_ROUTE_OF_ADMINISTRATION -- DEBUG
		EXEC dp.USP_SHRED_COMPOSITION_INGREDIENT @JSON_MESSAGE
		-- SELECT * FROM #COMPOSITION_INGREDIENT -- DEBUG
		EXEC DP.USP_SHRED_DP_COMPOSITION @JSON_MESSAGE
		-- SELECT * FROM #DP_COMPOSITION -- DEBUG
		EXEC DP.USP_SHRED_INGREDIENT_STRENGTH @JSON_MESSAGE
		-- SELECT * FROM #INGREDIENT_STRENGTH -- DEBUG
		EXEC DP.USP_SHRED_VARIANT @JSON_MESSAGE
		-- SELECT * FROM #VARIANT -- DEBUG
		-- VALIDATE
		EXEC DP.USP_VALIDATE_PARENT_COMPOSITION
		EXEC DP.USP_VALIDATE_COMPOSITION_ROUTE_OF_ADMINISTRATION
		EXEC DP.USP_VALIDATE_CHILD_COMPOSITION
		EXEC DP.USP_VALIDATE_COMPOSITION_INGREDIENT
		EXEC DP.USP_VALIDATE_INGREDIENT_STRENGTH
		EXEC DP.USP_PROCESS_PARENT_COMPOSITION
		EXEC DP.USP_PROCESS_COMPOSITION_ROUTE_OF_ADMINISTRATION
		EXEC DP.USP_PROCESS_CHILD_COMPOSITION
		EXEC DP.USP_PROCESS_COMPOSITION_INGREDIENT
		EXEC DP.USP_PROCESS_INGREDIENT_STRENGTH
		-- EXEC DP.USP_DUMMY -- DEBUG
		-- SET @DUMMY = 1 / 0 -- DEBUG
		SELECT @PK = PK, @TS = TS FROM #PARENT_COMPOSITION
		-- UPDATE TIMESTAMP IF AN INSERT OR AN UPDATE OCCURED
		IF EXISTS (SELECT 1 FROM #SP_COMMUNICATION WHERE KEY_STRING = 'UPDATE_OCCURED')
		BEGIN
			UPDATE DP.COMPOSITION
				SET TS = (SELECT VALUE_DATE FROM #SP_COMMUNICATION WHERE KEY_STRING = 'TS')
				WHERE PK IN (SELECT PK FROM #PARENT_COMPOSITION)
		END
		-- 
		SET @RESULT = common.UDF_GET_RESULT(@PK, @BO, DEFAULT, DEFAULT, DEFAULT, @TS)
		PRINT 'BEFORE COMMIT' -- DEBUG
		PRINT @@TRANCOUNT
		WHILE (@@TRANCOUNT > 0) COMMIT TRANSACTION;
		PRINT 'AFTER COMMIT' -- DEBUG
		PRINT @@TRANCOUNT
		RETURN
	END TRY
	BEGIN CATCH
	  PRINT 'INSIDE CATCH' -- DEBUG
		WHILE (@@TRANCOUNT > 0) ROLLBACK TRANSACTION;
		IF ERROR_NUMBER() < 50000
		BEGIN
			SET @RESULT = common.UDF_GET_RESULT(@PK, @BO, DEFAULT, ERROR_NUMBER(), 
					'ERROR_MESSAGE=' + RTRIM(LTRIM(ERROR_MESSAGE())) + '::' +
					'ERROR_NUMBER=' +  RTRIM(LTRIM(STR(ERROR_NUMBER()))) + '::' +
					'ERROR_PROCEDURE=' +  RTRIM(LTRIM(ERROR_PROCEDURE())) + '::' +
					'ERROR_LINE=' +  RTRIM(LTRIM(STR(ERROR_LINE()))) + '::' +
					'ERROR_SEVERITY=' +  RTRIM(LTRIM(STR(ERROR_SEVERITY()))) + '::' +
					'ERROR_STATE=' +  RTRIM(LTRIM(STR(ERROR_STATE()))), DEFAULT)
		END
		ELSE
		BEGIN
			SET @RESULT = common.UDF_GET_RESULT(@PK, @BO, ERROR_NUMBER(), DEFAULT, DEFAULT, DEFAULT)
		END
		RETURN
	END CATCH

END
GO

-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE DP.USP_SHRED_COMPOSITION
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	SELECT * FROM OPENJSON(@JSON_MESSAGE)
	WITH
	(
		PK BIGINT '$.COMPOSITION_NAME[0].PK',
		TS DATETIME2 '$.COMPOSITION_NAME[0].TS',
		COMPOSITION_NAME NVARCHAR(4000) '$.COMPOSITION_NAME[0].COMPOSITION_NAME',
		UPDATED_BY NVARCHAR(200) '$.COMPOSITION_NAME[0].UPDATED_BY',
		COMPOSITION NVARCHAR(MAX) '$.COMPOSITION_NAME[0].COMPOSITION' AS JSON
	) AS COMPOSITION_NAME
	CROSS APPLY OPENJSON(COMPOSITION)
	WITH
	(
		PK BIGINT,
		INGREDIENT_ROLE_FK       bigint,
		TS                       datetime2,
		VARIANT_FK               bigint,
		UNIT_OF_PRESENTATION_FK  bigint,
		PARENT_COMPOSITION_FK    bigint,
		ADMIN_DOSAGE_FORM_FK     bigint,
		MANF_DOSAGE_FORM_FK      bigint,
		UPDATED_BY               nvarchar(200),
		COMPOSITION_NAME_FK      bigint
	) AS COMPOSITION
END
GO

CREATE PROCEDURE [dp].[USP_SHRED_CHILD_COMPOSITION]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-24>
-- Description:	<EXTRACT COMPOSITION DATA>
-- =============================================
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #CHILD_COMPOSITION
	SELECT
		PK,
		INGREDIENT_ROLE_FK,
		TS,
		VARIANT_FK,
		UNIT_OF_PRESENTATION_FK,
		PARENT_COMPOSITION_FK,
		ADMIN_DOSAGE_FORM_FK,
		MANF_DOSAGE_FORM_FK,
		UPDATED_BY,
		COMBINED_DOSAGE_FORM_FK,
		COMPOSITION_NAME,
		COMPOSITION_NAME_USER_OVERRIDE
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	WITH 
	(
		COMPOSITION NVARCHAR(MAX) '$.CHILD_COMPOSITION' AS JSON
	)
	CROSS APPLY OPENJSON(COMPOSITION)
	WITH
	(
		PK BIGINT,
		INGREDIENT_ROLE_FK BIGINT,
		TS DATETIME2,
		VARIANT_FK BIGINT,
		UNIT_OF_PRESENTATION_FK BIGINT,
		PARENT_COMPOSITION_FK BIGINT,
		ADMIN_DOSAGE_FORM_FK BIGINT,
		MANF_DOSAGE_FORM_FK BIGINT,
		UPDATED_BY NVARCHAR(200),
		COMBINED_DOSAGE_FORM_FK BIGINT,
		COMPOSITION_NAME NVARCHAR(4000),
		COMPOSITION_NAME_USER_OVERRIDE BIT
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<EXTRTAT COMPOSITION - ROUTE OF INTERSECT DATA>
-- =============================================
CREATE PROCEDURE [dp].[USP_SHRED_COMPOSITION_INGREDIENT]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #COMPOSITION_INGREDIENT
	SELECT
		PK,
		PARENT_COMPOSITION_INGREDIENT_FK,
		NOTES,
		RM_BASE,
		SEQ,
		ANIMAL_SOURCED_MATERIAL_FK,
		COMPOSITION_FK,
		PHARMACEUTICAL_STANDARD_FK,
		SUBSTANCE_FK,
		UPDATED_BY,
		TS,
		NANOMATERIAL_FK,
		NANOMATERIAL_NOTES
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	WITH 
	(
		CHILD_COMPOSITION NVARCHAR(MAX) '$.CHILD_COMPOSITION' AS JSON
	)
	CROSS APPLY OPENJSON(CHILD_COMPOSITION)
	WITH
	(
		COMPOSITION_INGREDIENT NVARCHAR(MAX) '$.COMPOSITION_INGREDIENT' AS JSON
	)
	CROSS APPLY OPENJSON(COMPOSITION_INGREDIENT)
	WITH
	(
		COMPOSITION_INGREDIENT NVARCHAR(MAX),
		PK BIGINT,
		PARENT_COMPOSITION_INGREDIENT_FK BIGINT,
		NOTES NVARCHAR(2000),
		RM_BASE BIT,
		SEQ INT,
		ANIMAL_SOURCED_MATERIAL_FK BIGINT,
		COMPOSITION_FK BIGINT,
		PHARMACEUTICAL_STANDARD_FK BIGINT,
		SUBSTANCE_FK BIGINT,
		UPDATED_BY NVARCHAR(200),
		TS DATETIME2,
		NANOMATERIAL_FK BIGINT,
		NANOMATERIAL_NOTES NVARCHAR(2000)
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<EXTRTAT COMPOSITION - ROUTE OF INTERSECT DATA>
-- =============================================
CREATE PROCEDURE [dp].[USP_SHRED_COMPOSITION_ROUTE_OF_ADMINISTRATION]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #COMPOSITION_ROUTE_OF_ADMINISTRATION
	SELECT
		PK,
		ROUTE_OF_ADMINISTRATION_FK,
		TS,
		UPDATED_BY,
		COMPOSITION_FK
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	WITH
	(
		COMPOSITION_ROUTE_OF_ADMINISTRATION NVARCHAR(MAX) '$.COMPOSITION_ROUTE_OF_ADMINISTRATION' AS JSON
	)
	CROSS APPLY OPENJSON(COMPOSITION_ROUTE_OF_ADMINISTRATION)
	WITH
	(
		PK BIGINT,
		ROUTE_OF_ADMINISTRATION_FK BIGINT,
		TS DATETIME2,
		UPDATED_BY NVARCHAR(200),
		COMPOSITION_FK BIGINT
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<EXTRTAT COMPOSITION - ROUTE OF INTERSECT DATA>
-- =============================================
CREATE PROCEDURE [dp].[USP_SHRED_DP_COMPOSITION]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #DP_COMPOSITION
	SELECT
		PK,
		DP_FK,
		COMPOSITION_FK,
		TS,
		UPDATED_BY
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0].DP_COMPOSITION')
	with
	(
		DP_COMPOSITION NVARCHAR(MAX),
		PK BIGINT,
		DP_FK BIGINT,
		COMPOSITION_FK BIGINT,
		TS DATETIME2,
		UPDATED_BY NVARCHAR(200)
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<EXTRTAT COMPOSITION - ROUTE OF INTERSECT DATA>
-- =============================================
CREATE PROCEDURE [dp].[USP_SHRED_INGREDIENT_STRENGTH]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #INGREDIENT_STRENGTH
	SELECT
		PK,
		LOW_NUMERATOR_VALUE,
		LOW_NUMERATOR_UNIT_FK,
		LOW_DENOMINATOR_VALUE,
		LOW_DENOMINATOR_UNIT_FK,
		HIGH_NUMERATOR_VALUE,
		HIGH_NUMERATOR_UNIT_FK,
		HIGH_DENOMINATOR_VALUE,
		HIGH_DENOMINATOR_UNIT_FK,
		SEQ,
		COMPOSITION_INGREDIENT_FK,
		STRENGTH_QUALIFIER_FK,
		STRENGTH_TYPE_FK,
		UPDATED_BY,
		TS,
		USE_UNIT_OF_PRESENTATION
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	WITH 
	(
		CHILD_COMPOSITION NVARCHAR(MAX) '$.CHILD_COMPOSITION' AS JSON
	)
	CROSS APPLY OPENJSON(CHILD_COMPOSITION)
	WITH
	(
		COMPOSITION_INGREDIENT NVARCHAR(MAX) '$.COMPOSITION_INGREDIENT' AS JSON
	)
	CROSS APPLY OPENJSON(COMPOSITION_INGREDIENT)
	WITH
	(
		INGREDIENT_STRENGTH NVARCHAR(MAX) '$.INGREDIENT_STRENGTH' AS JSON
	)
	CROSS APPLY OPENJSON(INGREDIENT_STRENGTH)
	WITH
	(
		INGREDIENT_STRENGTH NVARCHAR(MAX),
		PK BIGINT,
		LOW_NUMERATOR_VALUE NVARCHAR(40),
		LOW_NUMERATOR_UNIT_FK BIGINT,
		LOW_DENOMINATOR_VALUE NVARCHAR(40),
		LOW_DENOMINATOR_UNIT_FK BIGINT,
		HIGH_NUMERATOR_VALUE NVARCHAR(40),
		HIGH_NUMERATOR_UNIT_FK BIGINT,
		HIGH_DENOMINATOR_VALUE NVARCHAR(40),
		HIGH_DENOMINATOR_UNIT_FK BIGINT,
		SEQ INT,
		COMPOSITION_INGREDIENT_FK BIGINT,
		STRENGTH_QUALIFIER_FK BIGINT,
		STRENGTH_TYPE_FK BIGINT,
		UPDATED_BY NVARCHAR(200),
		TS DATETIME2,
		USE_UNIT_OF_PRESENTATION BIT
	)
END
GO

CREATE PROCEDURE [dp].[USP_SHRED_PARENT_COMPOSITION]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-24>
-- Description:	<EXTRACT COMPOSITION DATA>
-- =============================================
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET XACT_ABORT, NOCOUNT ON
	INSERT INTO #PARENT_COMPOSITION
	SELECT
		PK,
		INGREDIENT_ROLE_FK,
		TS,
		VARIANT_FK,
		UNIT_OF_PRESENTATION_FK,
		PARENT_COMPOSITION_FK,
		ADMIN_DOSAGE_FORM_FK,
		MANF_DOSAGE_FORM_FK,
		UPDATED_BY,
		COMBINED_DOSAGE_FORM_FK,
		COMPOSITION_NAME,
		COMPOSITION_NAME_USER_OVERRIDE
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	with
	(
		PK BIGINT,
		INGREDIENT_ROLE_FK BIGINT,
		TS DATETIME2,
		VARIANT_FK BIGINT,
		UNIT_OF_PRESENTATION_FK BIGINT,
		PARENT_COMPOSITION_FK BIGINT,
		ADMIN_DOSAGE_FORM_FK BIGINT,
		MANF_DOSAGE_FORM_FK BIGINT,
		UPDATED_BY NVARCHAR(200),
		COMBINED_DOSAGE_FORM_FK BIGINT,
		COMPOSITION_NAME NVARCHAR(4000),
		COMPOSITION_NAME_USER_OVERRIDE BIT
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<EXTRTAT COMPOSITION - ROUTE OF INTERSECT DATA>
-- =============================================
CREATE PROCEDURE [dp].[USP_SHRED_VARIANT]
	@JSON_MESSAGE NVARCHAR(MAX)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON
	INSERT INTO #VARIANT
	SELECT
		PK,
		RM_DRUG_NMI_VARIANT_CODE,
		COLOUR_FK,
		FLAVOUR_FK,
		NOTES,
		SEQ,
		UPDATED_BY,
		TS
	FROM OPENJSON(@JSON_MESSAGE, '$.PARENT_COMPOSITION[0]')
	WITH 
	(
		CHILD_COMPOSITION NVARCHAR(MAX) '$.CHILD_COMPOSITION' AS JSON
	)
	CROSS APPLY OPENJSON(CHILD_COMPOSITION)
	WITH
	(
		VARIANT NVARCHAR(MAX) '$.VARIANT' AS JSON
	)
	CROSS APPLY OPENJSON(VARIANT)
	WITH
	(
		PK BIGINT,
		RM_DRUG_NMI_VARIANT_CODE BIGINT,
		COLOUR_FK BIGINT,
		FLAVOUR_FK BIGINT,
		NOTES NVARCHAR(2000),
		SEQ INT,
		UPDATED_BY NVARCHAR(200),
		TS DATETIME2
	)
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-03>
-- Description:	<PROCESS COMPOSITION_NAME COMPONENT OF THE JSON MESSAGE>
-- =============================================
CREATE PROCEDURE [dp].[USP_STORE_UPDATE_OCCURED]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	--
	IF NOT EXISTS (SELECT 1 FROM #SP_COMMUNICATION WHERE KEY_STRING = 'UPDATE_OCCURED')
	BEGIN
		INSERT INTO #SP_COMMUNICATION (KEY_STRING) VALUES ('UPDATE_OCCURED')
	END
	RETURN
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-26>
-- Description:	<USP_VALIDATE_PARENT_COMPOSITION>
-- =============================================
CREATE PROCEDURE [dp].[USP_VALIDATE_CHILD_COMPOSITION]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @DUMMY BIGINT
	--SELECT * FROM #CHILD_COMPOSITION
	IF EXISTS (	SELECT 1 FROM #CHILD_COMPOSITION WHERE PARENT_COMPOSITION_FK IS NULL )
	BEGIN
		;THROW 50008, 'Child composition must refer to a parent composition.', 0
		RETURN
	END
	
	IF EXISTS (	SELECT PARENT_COMPOSITION_FK FROM #CHILD_COMPOSITION
				EXCEPT
				SELECT PK FROM #PARENT_COMPOSITION )
	BEGIN
		;THROW 50007, 'Child composition refers to an invalid parent composition.', 0
		RETURN
	END
	
	IF EXISTS (	SELECT 1 FROM #CHILD_COMPOSITION WHERE INGREDIENT_ROLE_FK IS NULL )
	BEGIN
		;THROW 50009, 'Child composition must be assigned an ingredient role.', 0
		RETURN
	END
	
	IF EXISTS (	SELECT INGREDIENT_ROLE_FK FROM #CHILD_COMPOSITION
				EXCEPT
				SELECT PK FROM DP.INGREDIENT_ROLE )
	BEGIN
		;THROW 50010, 'Child composition refers to an invalid ingredient role.', 0
		RETURN
	END	
	
	IF EXISTS (	SELECT COUNT(*) AS NO_OF_RECS, COUNT(DISTINCT PK) AS DISTINCT_PKS
				FROM DP.COMPOSITION
				HAVING COUNT(*) <> COUNT(DISTINCT PK) )
	BEGIN
		;THROW 50011, 'Child compositions cannot share identifiers.', 0
		RETURN
	END	
	
	
END
GO

CREATE PROCEDURE [dp].[USP_VALIDATE_COMPOSITION_INGREDIENT]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @DUMMY BIGINT
	
	IF EXISTS 	(	SELECT PK FROM #COMPOSITION_INGREDIENT WHERE PK >= 0
					EXCEPT
					SELECT PK FROM DP.COMPOSITION_INGREDIENT WHERE PK IN (SELECT PK FROM #COMPOSITION_INGREDIENT WHERE PK >= 0)
				)
	BEGIN
		;THROW 50012, 'Composition ingredient record not found.', 0
		RETURN
	END
END
GO

CREATE PROCEDURE [dp].[USP_VALIDATE_COMPOSITION_ROUTE_OF_ADMINISTRATION]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @DUMMY BIGINT
	

END
GO

CREATE PROCEDURE [dp].[USP_VALIDATE_INGREDIENT_STRENGTH]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @DUMMY BIGINT
	
	IF EXISTS 	(	SELECT PK FROM #INGREDIENT_STRENGTH WHERE PK >= 0
					EXCEPT
					SELECT PK FROM DP.INGREDIENT_STRENGTH WHERE PK IN (SELECT PK FROM #INGREDIENT_STRENGTH WHERE PK >= 0)
				)
	BEGIN
		;THROW 50013, 'Ingredient strength record not found.', 0
		RETURN
	END
END
GO

-- =============================================
-- Author:		<HICHAM DOUBA>
-- Create date: <2020-02-26>
-- Description:	<USP_VALIDATE_PARENT_COMPOSITION>
-- =============================================
CREATE PROCEDURE [dp].[USP_VALIDATE_PARENT_COMPOSITION]
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @IN_PK BIGINT
	DECLARE @DUMMY BIGINT
	DECLARE @DB_TS DATETIME2
	DECLARE @IN_TS DATETIME2

	SELECT @IN_PK = PK,  @IN_TS = TS FROM #PARENT_COMPOSITION
	SELECT @DB_TS = TS FROM DP.COMPOSITION WHERE PK = @IN_PK

	PRINT @DB_TS
	IF (@IN_PK >= 0 AND @DB_TS IS NULL)
	BEGIN
		;THROW 50003, 'Record not found.', 0
		RETURN
	END

	IF (@IN_PK >= 0 AND @DB_TS != @IN_TS)
	BEGIN
		;THROW 50001, 'Record modifed by another user.', 0
		RETURN
	END

	IF EXISTS (SELECT 1 FROM #PARENT_COMPOSITION WHERE PARENT_COMPOSITION_FK IS NOT NULL)
	BEGIN
		;THROW 50004, 'Parent composition cannot be a child.', 0
		RETURN
	END

	IF EXISTS (SELECT 1 FROM #PARENT_COMPOSITION WHERE MANF_DOSAGE_FORM_FK IS NULL)
	BEGIN
		;THROW 50006, 'Parent composition must have a manufactured dosage form.', 0
		RETURN
	END

END
GO


COMMIT
GO
--====================================================================
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date, ,>
-- Description:	<Description, ,>
-- =============================================
CREATE FUNCTION [common].[UDF_GET_RESULT] 
(
	@PK BIGINT = NULL,
	@NAME NVARCHAR(400) = NULL,
	@ERROR_CODE INTEGER = NULL,
	@DATABASE_ERROR_CODE INTEGER = NULL,
	@DATABASE_ERROR_DESC NVARCHAR(4000) = NULL,
	@TS DATETIME2 = NULL
)
RETURNS NVARCHAR(MAX)
AS
BEGIN
	DECLARE @MESSAGE_TS_STRING NVARCHAR(60)
	SET @MESSAGE_TS_STRING = FORMAT(GETDATE(),'yyyy-MM-ddTHH:mm:ss.fffffff')
	--
	DECLARE @TS_STRING NVARCHAR(60)
	IF @TS IS NOT NULL
		SET @TS_STRING = FORMAT(@TS,'yyyy-MM-ddTHH:mm:ss.fffffff')
	ELSE
		SET @TS_STRING = FORMAT(GETDATE(),'yyyy-MM-ddTHH:mm:ss.fffffff')
	-- SET @TS_STRING = CONVERT(NVARCHAR, GETDATE(), 126)
	DECLARE @RESULT NVARCHAR(MAX) = '{"RESULT":[{"PK":0,"NAME":"","TS":"","ERROR_CODE":0,"ERROR_DESC_EN":"","ERROR_DESC_FR":"","DATABASE_ERROR_CODE":0,"DATABASE_ERROR_DESC":"","MESSAGE_TS":""}]}'
	SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].TS', @TS_STRING)
	IF @PK IS NOT NULL
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].PK', @PK)
	IF @NAME IS NOT NULL
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].NAME', @NAME)
	IF @ERROR_CODE IS NOT NULL
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].ERROR_CODE', @ERROR_CODE)
	IF @DATABASE_ERROR_CODE IS NOT NULL
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].DATABASE_ERROR_CODE', @DATABASE_ERROR_CODE)
	IF @DATABASE_ERROR_DESC IS NOT NULL
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].DATABASE_ERROR_DESC', @DATABASE_ERROR_DESC)
	--
	SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].MESSAGE_TS', @MESSAGE_TS_STRING)
	--
	IF @ERROR_CODE IS NOT NULL
	BEGIN
		DECLARE @ERROR_DESC_EN NVARCHAR(200)
		DECLARE @ERROR_DESC_FR NVARCHAR(200)
		SELECT @ERROR_DESC_EN = ERROR_DESC_EN, @ERROR_DESC_FR = ERROR_DESC_FR
			FROM COMMON.ERROR
			WHERE ERROR.ERROR_CODE = @ERROR_CODE
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].ERROR_DESC_EN', @ERROR_DESC_EN)
		SET @RESULT = JSON_MODIFY(@RESULT, '$.RESULT[0].ERROR_DESC_FR', @ERROR_DESC_FR)
	END
	RETURN @RESULT
END
GO


CREATE PROCEDURE [common].[USP_CALL_SP]
	@SP NVARCHAR(400),
	@UPDATED_BY NVARCHAR (200),
	@JSON_MESSAGE NVARCHAR(MAX),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
	SET XACT_ABORT, NOCOUNT ON
	DECLARE @PK BIGINT
	INSERT INTO COMMON.SP_CALL_LOG 
			(SP, UPDATED_BY, START_TIME, PAYLOAD)
		VALUES
			(@SP, @UPDATED_BY, GETDATE(), @JSON_MESSAGE);
	SET @PK = SCOPE_IDENTITY()
	WHILE (@@TRANCOUNT > 0) COMMIT TRANSACTION;
	EXEC @SP @JSON_MESSAGE, @RESULT OUTPUT
	UPDATE COMMON.SP_CALL_LOG SET END_TIME = GETDATE(), RESULT = @RESULT WHERE PK = @PK
	WHILE (@@TRANCOUNT > 0) COMMIT TRANSACTION;
	RETURN
END
GO


CREATE PROCEDURE COMMON.USP_GET_BO_COMMON_ORG (@PK BIGINT)
AS
BEGIN
	SELECT	ORG.*
		,	(
				SELECT	ORG_ADDR.PK
					,	(
							SELECT	ADDR.*
								,	(
										SELECT	COUNTRY.*
										FROM COMMON.COUNTRY WHERE COUNTRY.PK = ADDR.COUNTRY_FK FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS 'COUNTRY'
								,	(
										SELECT	PROVINCE.*
										FROM COMMON.PROVINCE WHERE PROVINCE.PK = ADDR.PROVINCE_FK FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS 'PROVINCE'
							FROM COMMON.ADDR
							WHERE ADDR.PK = ORG_ADDR.ADDR_FK FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS 'ADDR'
				FROM COMMON.ORG_ADDR
				WHERE ORG_ADDR.ORG_FK = ORG.PK FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS 'ORG_ADDR'
		,	(
				SELECT	ORG_CONTACT.*
					,	(
							SELECT	CONTACT.*
								,	(
										SELECT	SALUTATION.*
										FROM COMMON.SALUTATION WHERE SALUTATION.PK = CONTACT.SALUTATION_FK FOR JSON AUTO, INCLUDE_NULL_VALUES
									) AS SALUTATION
							FROM COMMON.CONTACT WHERE CONTACT.PK = ORG_CONTACT.CONTACT_FK FOR JSON AUTO, INCLUDE_NULL_VALUES
						) AS CONTACT
				FROM COMMON.ORG_CONTACT WHERE ORG_CONTACT.ORG_FK = ORG.PK FOR JSON AUTO, INCLUDE_NULL_VALUES
			) AS ORG_CONTACT 
	FROM COMMON.ORG AS ORG
	WHERE ORG.PK = @PK FOR JSON AUTO, INCLUDE_NULL_VALUES, ROOT('ORG')
END
GO

CREATE PROCEDURE [common].[USP_SEND_JSON_MESSAGE]
	@JSON_MESSAGE NVARCHAR(MAX),
	@RESULT NVARCHAR(MAX) OUTPUT
AS
BEGIN
	SET NOCOUNT ON
	-- FORMULATE AN OK RESPONSE
	SET @RESULT = common.UDF_GET_RESULT(101513, 'COMPOSITION_NAME', DEFAULT, DEFAULT, DEFAULT, DEFAULT)
	RETURN
END
GO


COMMIT
GO
--=============================================
CREATE SEQUENCE GENERATE
       AS bigint
       INCREMENT BY 1
       NO MINVALUE
       NO MAXVALUE
       START WITH 1
       CACHE 
       NOCYCLE;

CREATE SEQUENCE ORG_SEQ
       AS bigint
       INCREMENT BY 1
       NO MINVALUE
       NO MAXVALUE
       START WITH 18000
       CACHE 
       NOCYCLE;

CREATE TYPE cts.TT_KEY_MAP
AS
TABLE
(

);

CREATE TYPE cts.TT_SP_COMMUNICATION
AS
TABLE
(

);

CREATE TABLE common.ADDR
(
   PK               bigint identity   NOT NULL,
   RM_ADDR_CODE     bigint,
   SUITE_NO         nvarchar(20),
   STREET_NAME      nvarchar(80),
   CITY_NAME        nvarchar(60),
   POSTAL_CODE      nvarchar(20),
   POST_OFFICE_BOX  nvarchar(15),
   INACTIVE_DATE    datetime2,
   UPDATED_BY       nvarchar(200)     CONSTRAINT C_0000002000 DEFAULT ('SYSTEM') NOT NULL,
   TS               datetime2         CONSTRAINT C_0000001000 DEFAULT (sysdatetime()) NOT NULL,
   COUNTRY_FK       bigint            NOT NULL,
   PROVINCE_FK      bigint
);

ALTER TABLE common.ADDR
  ADD CONSTRAINT C_0000000001
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ADDR TO cts;

CREATE TABLE common.CONTACT
(
   PK                  bigint identity   NOT NULL,
   RM_CONTACT_CODE     bigint,
   RM_SALUTATION_CODE  bigint,
   SURNAME             nvarchar(40),
   GIVEN_NAME          nvarchar(40),
   INITIALS            nvarchar(3),
   POSITION            nvarchar(40),
   DEPARTMENT          nvarchar(40),
   LANG                nvarchar(1)       NOT NULL,
   TELEPHONE_NO        nvarchar(25),
   FAX_NO              nvarchar(25),
   E_MAIL_ADDR         nvarchar(50),
   INACTIVE_DATE       datetime2,
   UPDATED_BY          nvarchar(200)     CONSTRAINT C_0000002001 DEFAULT ('SYSTEM') NOT NULL,
   TS                  datetime2         CONSTRAINT C_0000001001 DEFAULT (sysdatetime()) NOT NULL,
   SALUTATION_FK       bigint
);

ALTER TABLE common.CONTACT
  ADD CONSTRAINT C_0000000013
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.CONTACT TO cts;

CREATE TABLE common.COUNTRY
(
   PK                     bigint identity   NOT NULL,
   RM_COUNTRY_CODE        bigint,
   COUNTRY_DESC_EN        nvarchar(200)     NOT NULL,
   COUNTRY_DESC_FR        nvarchar(200),
   COUNTRY_SHORT          nvarchar(3),
   POSTAL_CODE_FORMAT_RE  nvarchar(1000),
   UPDATED_BY             nvarchar(200)     CONSTRAINT C_0000002002 DEFAULT ('SYSTEM') NOT NULL,
   TS                     datetime2         CONSTRAINT C_0000001002 DEFAULT (sysdatetime()) NOT NULL,
   INACTIVE_DATE          datetime2
);

ALTER TABLE common.COUNTRY
  ADD CONSTRAINT C_0000000018
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.COUNTRY TO cts;

CREATE TABLE common.CSP_APPLICANT
(
   PK                        bigint identity   NOT NULL,
   UPDATED_BY                nvarchar(200)     DEFAULT ('SYSTEM') NOT NULL,
   TS                        datetime2         DEFAULT (sysdatetime()) NOT NULL,
   APPLICANT_ORG_ADDR_FK     bigint            NOT NULL,
   APPLICANT_ORG_CONTACT_FK  bigint            NOT NULL,
   BILLING_ORG_ADDR_FK       bigint,
   BILLING_ORG_CONTACT_FK    bigint
);

ALTER TABLE common.CSP_APPLICANT
  ADD CONSTRAINT CSP_APPLICANT_PK
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.CSP_APPLICANT TO cts;

CREATE TABLE common.ERROR
(
   PK             bigint identity   NOT NULL,
   UPDATED_BY     nvarchar(200)     DEFAULT ('SYSTEM') NOT NULL,
   TS             datetime2         DEFAULT (sysdatetime()) NOT NULL,
   ERROR_CODE     int               NOT NULL,
   ERROR_TYPE     nvarchar(20)      NOT NULL,
   ERROR_DESC_EN  nvarchar(200)     NOT NULL,
   ERROR_DESC_FR  nvarchar(200)     NOT NULL
);

ALTER TABLE common.ERROR
  ADD CONSTRAINT ERROR_PK
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ERROR TO cts;

CREATE TABLE common.ERROR_LOG
(
   PK          bigint identity   NOT NULL,
   UPDATED_BY  nvarchar(200)     DEFAULT ('SYSTEM') NOT NULL,
   TS          datetime2         DEFAULT (sysdatetime()) NOT NULL,
   ERROR_FK    bigint            NOT NULL,
   INFO        nvarchar(max)     NOT NULL
);

ALTER TABLE common.ERROR_LOG
  ADD CONSTRAINT ERROR_LOG_PK
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ERROR_LOG TO cts;

CREATE TABLE common.NOTE_TYPE
(
   PK                 bigint identity   NOT NULL,
   NOTE_TYPE_DESC_EN  nvarchar(200)     NOT NULL,
   NOTE_TYPE_DESC_FR  nvarchar(200)     NOT NULL,
   SORT_KEY           int               NOT NULL,
   TS                 datetime2         CONSTRAINT C_0000001003 DEFAULT (sysdatetime()) NOT NULL,
   UPDATED_BY         nvarchar(200)     CONSTRAINT C_0000002003 DEFAULT ('SYSTEM') NOT NULL,
   NOTE_TYPE_CVK      int               NOT NULL,
   INACTIVE_DATE      datetime2
);

ALTER TABLE common.NOTE_TYPE
  ADD CONSTRAINT C_0000000085
  PRIMARY KEY CLUSTERED (PK);

ALTER TABLE common.NOTE_TYPE
   ADD CONSTRAINT C_0000000087 UNIQUE (NOTE_TYPE_DESC_FR);

ALTER TABLE common.NOTE_TYPE
   ADD CONSTRAINT C_0000000086 UNIQUE (NOTE_TYPE_DESC_EN);


GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.NOTE_TYPE TO cts;

CREATE TABLE common.ORG
(
   PK                     bigint identity   NOT NULL,
   RM_COMPANY_CODE        bigint,
   ORG_NAME               nvarchar(200)     NOT NULL,
   RM_MANF_CODE           nvarchar(5),
   OLD_NOTES              nvarchar(max),
   DPD_COMPANY_FLAG       bit               CONSTRAINT ORG_DPD_COMPANY_FLAG_DEFAULT DEFAULT ((1)),
   DELS_COMPANY_FLAG      bit               CONSTRAINT ORG_DELS_COMPANY_FLAG_DEFAULT DEFAULT ((1)),
   DRSE_FLAG              bit,
   NOTES                  nvarchar(max),
   CSP_FLAG               bit,
   REP_FLAG               bit,
   UPDATED_BY             nvarchar(200)     CONSTRAINT C_0000002004 DEFAULT ('SYSTEM') NOT NULL,
   TS                     datetime2         CONSTRAINT C_0000001004 DEFAULT (sysdatetime()) NOT NULL,
   COMPANY_CODE           bigint            CONSTRAINT ORG_COMPANY_CODE_DEFAULT DEFAULT (NEXT VALUE FOR [COMMON].[ORG_SEQ]) NOT NULL,
   MANF_CODE              nvarchar(5),
   MF_FLAG                bit               NOT NULL,
   CT_FLAG                bit               NOT NULL,
   INACTIVATION_DATE      datetime2,
   BUSINESS_NO            nvarchar(9),
   BUSINESS_NO_VALIDATED  bit
);

ALTER TABLE common.ORG
  ADD CONSTRAINT C_0000000093
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ORG TO cts;

CREATE TABLE common.ORG_ADDR
(
   PK          bigint identity   NOT NULL,
   ORG_FK      bigint            NOT NULL,
   ADDR_FK     bigint            NOT NULL,
   UPDATED_BY  nvarchar(200)     CONSTRAINT C_0000002005 DEFAULT ('SYSTEM') NOT NULL,
   TS          datetime2         CONSTRAINT C_0000001005 DEFAULT (sysdatetime()) NOT NULL
);

ALTER TABLE common.ORG_ADDR
  ADD CONSTRAINT C_0000000094
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ORG_ADDR TO cts;

CREATE TABLE common.ORG_CONTACT
(
   PK          bigint identity   NOT NULL,
   ORG_FK      bigint            NOT NULL,
   CONTACT_FK  bigint            NOT NULL,
   UPDATED_BY  nvarchar(200)     CONSTRAINT C_0000002006 DEFAULT ('SYSTEM') NOT NULL,
   TS          datetime2         CONSTRAINT C_0000001006 DEFAULT (sysdatetime()) NOT NULL
);

ALTER TABLE common.ORG_CONTACT
  ADD CONSTRAINT C_0000000090
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ORG_CONTACT TO cts;

CREATE TABLE common.ORG_TYPE
(
   PK                bigint identity   NOT NULL,
   RM_ORG_TYPE_CODE  int,
   ORG_TYPE_DESC_EN  nvarchar(200)     NOT NULL,
   ORG_TYPE_DESC_FR  nvarchar(200)     NOT NULL,
   INACTIVE_DATE     datetime2,
   USAGE_FLAG        bit,
   UPDATED_BY        nvarchar(200)     CONSTRAINT C_0000002007 DEFAULT ('SYSTEM') NOT NULL,
   TS                datetime2         CONSTRAINT C_0000001007 DEFAULT (sysdatetime()) NOT NULL,
   ORG_TYPE_CVK      int               NOT NULL
);

ALTER TABLE common.ORG_TYPE
  ADD CONSTRAINT C_0000000095
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.ORG_TYPE TO cts;

CREATE TABLE common.PROVINCE
(
   PK                bigint identity   NOT NULL,
   RM_PROVINCE_CODE  bigint,
   PROVINCE_DESC_EN  nvarchar(200),
   PROVINCE_SYMBOL   nvarchar(6),
   COUNTRY_SHORT     nvarchar(3),
   PROVINCE_DESC_FR  nvarchar(200),
   UPDATED_BY        nvarchar(200)     CONSTRAINT C_0000002008 DEFAULT ('SYSTEM') NOT NULL,
   TS                datetime2         CONSTRAINT C_0000001008 DEFAULT (sysdatetime()) NOT NULL,
   INACTIVE_DATE     datetime2
);

ALTER TABLE common.PROVINCE
  ADD CONSTRAINT C_0000000106
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.PROVINCE TO cts;

CREATE TABLE common.SALUTATION
(
   PK                  bigint identity   NOT NULL,
   RM_SALUTATION_CODE  bigint,
   SALUTATION_EN       nvarchar(10)      NOT NULL,
   SALUTATION_FR       nvarchar(10)      NOT NULL,
   UPDATED_BY          nvarchar(200)     CONSTRAINT C_0000002009 DEFAULT ('SYSTEM') NOT NULL,
   TS                  datetime2         CONSTRAINT C_0000001009 DEFAULT (sysdatetime()) NOT NULL,
   INACTIVE_DATE       datetime2
);

ALTER TABLE common.SALUTATION
  ADD CONSTRAINT C_0000000166
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.SALUTATION TO cts;

CREATE TABLE common.SP_CALL_LOG
(
   PK          bigint identity   NOT NULL,
   SP          nvarchar(400)     NOT NULL,
   UPDATED_BY  nvarchar(200)     DEFAULT ('SYSTEM') NOT NULL,
   TS          datetime2         DEFAULT (sysdatetime()) NOT NULL,
   START_TIME  datetime2         DEFAULT (sysdatetime()) NOT NULL,
   END_TIME    datetime2         DEFAULT (sysdatetime()) NOT NULL,
   PAYLOAD     nvarchar(max),
   RESULT      nvarchar(max)
);

ALTER TABLE common.SP_CALL_LOG
  ADD CONSTRAINT SP_CALL_LOG_PK
  PRIMARY KEY CLUSTERED (PK);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.SP_CALL_LOG TO cts;

CREATE TABLE common.TABLE_TEMPLATE
(
   UPDATED_BY  nvarchar(200)   NOT NULL,
   TS          datetime2       CONSTRAINT C_0000001010 DEFAULT (sysdatetime()) NOT NULL
);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.TABLE_TEMPLATE TO cts;

CREATE TABLE common.TABLE_TEMPLATE_REMOVE_COLUMN
(
   LAST_UPDATE_DATE  datetime
);

GRANT DELETE, REFERENCES, UPDATE, SELECT, INSERT ON common.TABLE_TEMPLATE_REMOVE_COLUMN TO cts;


ALTER TABLE common.ADDR 
  ADD CONSTRAINT C_0000000189 FOREIGN KEY (COUNTRY_FK)
  REFERENCES common.COUNTRY (PK);

ALTER TABLE common.ADDR 
  ADD CONSTRAINT ADDRESS_PROVINCE_FK FOREIGN KEY (PROVINCE_FK)
  REFERENCES common.PROVINCE (PK);

ALTER TABLE common.CONTACT 
  ADD CONSTRAINT C_0000000220 FOREIGN KEY (SALUTATION_FK)
  REFERENCES common.SALUTATION (PK);

ALTER TABLE common.CSP_APPLICANT 
  ADD CONSTRAINT CSP_APPLICANT_ORG_ADDR_FK FOREIGN KEY (APPLICANT_ORG_ADDR_FK)
  REFERENCES common.ORG_ADDR (PK);

ALTER TABLE common.CSP_APPLICANT 
  ADD CONSTRAINT CSP_APPLICANT_ORG_ADDR_FKV1 FOREIGN KEY (BILLING_ORG_ADDR_FK)
  REFERENCES common.ORG_ADDR (PK);

ALTER TABLE common.CSP_APPLICANT 
  ADD CONSTRAINT CSP_APPLICANT_ORG_CONTACT_FK FOREIGN KEY (APPLICANT_ORG_CONTACT_FK)
  REFERENCES common.ORG_CONTACT (PK);

ALTER TABLE common.CSP_APPLICANT 
  ADD CONSTRAINT CSP_APPLICANT_ORG_CONTACT_FKV1 FOREIGN KEY (BILLING_ORG_CONTACT_FK)
  REFERENCES common.ORG_CONTACT (PK);

ALTER TABLE common.ERROR_LOG 
  ADD CONSTRAINT ERROR_LOG_ERROR_FK FOREIGN KEY (ERROR_FK)
  REFERENCES common.ERROR (PK);

ALTER TABLE common.ORG_ADDR 
  ADD CONSTRAINT C_0000000343 FOREIGN KEY (ADDR_FK)
  REFERENCES common.ADDR (PK);

ALTER TABLE common.ORG_ADDR 
  ADD CONSTRAINT C_0000000344 FOREIGN KEY (ORG_FK)
  REFERENCES common.ORG (PK);

ALTER TABLE common.ORG_CONTACT 
  ADD CONSTRAINT C_0000000340 FOREIGN KEY (CONTACT_FK)
  REFERENCES common.CONTACT (PK);

ALTER TABLE common.ORG_CONTACT 
  ADD CONSTRAINT C_0000000341 FOREIGN KEY (ORG_FK)
  REFERENCES common.ORG (PK);


CREATE VIEW [common].[CSP_APPLICANT_WV]
AS
SELECT        common.CSP_APPLICANT.PK, common.CSP_APPLICANT.APPLICANT_ORG_ADDR_FK, common.CSP_APPLICANT.APPLICANT_ORG_CONTACT_FK, common.CSP_APPLICANT.BILLING_ORG_ADDR_FK, 
                         common.CSP_APPLICANT.BILLING_ORG_CONTACT_FK,common.CSP_APPLICANT.UPDATED_BY, common.CSP_APPLICANT.TS, 
                         APPLICANT_ORG_ORG_ADDR.ORG_FK AS APPLICANT_ORG_ORG_FK_RO, APPLICANT_ORG_ORG.ORG_NAME AS APPLICANT_ORG_ORG_NAME_RO, APPLICANT_ORG_ORG.OLD_NOTES AS APPLICANT_ORG_ORG_OLD_NOTES_RO, 
                         APPLICANT_ORG_ORG.COMPANY_CODE AS APPLICANT_ORG_ORG_COMPANY_CODE_RO, APPLICANT_ORG_ORG.MANF_CODE AS APPLICANT_ORG_ORG_MANF_CODE_RO, APPLICANT_ORG_ORG.NOTES AS APPLICANT_ORG_ORG_NOTES_RO, 
                         APPLICANT_ORG_ORG.INACTIVATION_DATE AS APPLICANT_ORG_ORG_INACTIVATION_DATE_RO, APPLICANT_ORG_ORG_ADDR.ADDR_FK AS APPLICANT_ORG_ADDR_FK_RO, 
                         APPLICANT_ORG_ADDR.SUITE_NO AS APPLICANT_ORG_ADDR_SUITE_NO_RO, APPLICANT_ORG_ADDR.STREET_NAME AS APPLICANT_ORG_ADDR_STREET_NAME_RO, 
                         APPLICANT_ORG_ADDR.CITY_NAME AS APPLICANT_ORG_ADDR_CITY_NAME_RO, APPLICANT_ORG_ADDR.POSTAL_CODE AS APPLICANT_ORG_ADDR_POSTAL_CODE_RO, 
                         APPLICANT_ORG_ADDR.POST_OFFICE_BOX AS APPLICANT_ORG_ADDR_POST_OFFICE_BOX_RO, APPLICANT_ORG_ADDR.INACTIVE_DATE AS APPLICANT_ORG_ADDR_INACTIVE_DATE_RO, 
                         APPLICANT_ORG_ADDR.PROVINCE_FK AS APPLICANT_ORG_PROVINCE_FK_RO, APPLICANT_ORG_PROVINCE.PROVINCE_DESC_EN AS APPLICANT_ORG_PROVINCE_DESC_EN_RO, 
                         APPLICANT_ORG_PROVINCE.PROVINCE_DESC_FR AS APPLICANT_ORG_PROVINCE_DESC_FR_RO, APPLICANT_ORG_PROVINCE.PROVINCE_SYMBOL AS APPLICANT_ORG_PROVINCE_SYMBOL_RO, 
                         APPLICANT_ORG_ADDR.COUNTRY_FK AS APPLICANT_ORG_COUNTRY_FK_RO, APPLICANT_ORG_COUNTRY.COUNTRY_DESC_EN AS APPLICANT_ORG_COUNTRY_DESC_EN_RO, 
                         APPLICANT_ORG_COUNTRY.COUNTRY_DESC_FR AS APPLICANT_ORG_COUNTRY_DESC_FR_RO, APPLICANT_ORG_COUNTRY.COUNTRY_SHORT AS APPLICANT_ORG_COUNTRY_SHORT_RO, 
                         APPLICANT_ORG_COUNTRY.POSTAL_CODE_FORMAT_RE AS APPLICANT_ORG_COUNTRY_POSTAL_CODE_FORMAT_RE_RO, APPLICANT_ORG_ORG_CONTACT.ORG_FK AS APPLICANT_ORG_ORG_CONTACT_ORG_FK_RO, 
                         APPLICANT_ORG_ORG_CONTACT.CONTACT_FK AS APPLICANT_ORG_ORG_CONTACT_FK_RO, APPLICANT_ORG_CONTACT.SURNAME AS APPLICANT_ORG_CONTACT_SURNAME_RO, 
                         APPLICANT_ORG_CONTACT.GIVEN_NAME AS APPLICANT_ORG_CONTACT_GIVEN_NAME_RO, APPLICANT_ORG_CONTACT.INITIALS AS APPLICANT_ORG_CONTACT_INITIALS_RO, 
                         APPLICANT_ORG_CONTACT.POSITION AS APPLICANT_ORG_CONTACT_POSITION_RO, APPLICANT_ORG_CONTACT.DEPARTMENT AS APPLICANT_ORG_CONTACT_DEPARTMENT_RO, 
                         APPLICANT_ORG_CONTACT.LANG AS APPLICANT_ORG_CONTACT_LANG_RO, APPLICANT_ORG_CONTACT.TELEPHONE_NO AS APPLICANT_ORG_CONTACT_TELEPHONE_NO_RO, 
                         APPLICANT_ORG_CONTACT.FAX_NO AS APPLICANT_ORG_CONTACT_FAX_NO_RO, APPLICANT_ORG_CONTACT.E_MAIL_ADDR AS APPLICANT_ORG_CONTACT_E_MAIL_ADDR_RO, 
                         APPLICANT_ORG_CONTACT.INACTIVE_DATE AS APPLICANT_ORG_CONTACT_INACTIVE_DATE_RO, APPLICANT_ORG_CONTACT.SALUTATION_FK AS APPLICANT_ORG_CONTACT_SALUTATION_FK_RO, 
                         APPLICANT_ORG_CONTACT_SALUTATION.SALUTATION_EN AS APPLICANT_ORG_CONTACT_SALUTATION_EN_RO, APPLICANT_ORG_CONTACT_SALUTATION.SALUTATION_FR AS APPLICANT_ORG_CONTACT_SALUTATION_FR_RO, 
                         BILLING_ORG_ORG_ADDR.ORG_FK AS BILLING_ORG_ORG_FK_RO, BILLING_ORG_ORG.ORG_NAME AS BILLING_ORG_ORG_NAME_RO, BILLING_ORG_ORG.OLD_NOTES AS BILLING_ORG_ORG_OLD_NOTES_RO, 
                         BILLING_ORG_ORG.COMPANY_CODE AS BILLING_ORG_ORG_COMPANY_CODE_RO, BILLING_ORG_ORG.MANF_CODE AS BILLING_ORG_ORG_MANF_CODE_RO, BILLING_ORG_ORG.NOTES AS BILLING_ORG_ORG_NOTES_RO, 
                         BILLING_ORG_ORG.INACTIVATION_DATE AS BILLING_ORG_ORG_INACTIVATION_DATE_RO, BILLING_ORG_ORG_ADDR.ADDR_FK AS BILLING_ORG_ADDR_FK_RO, BILLING_ORG_ADDR.SUITE_NO AS BILLING_ORG_ADDR_SUITE_NO_RO, 
                         BILLING_ORG_ADDR.STREET_NAME AS BILLING_ORG_ADDR_STREET_NAME_RO, BILLING_ORG_ADDR.CITY_NAME AS BILLING_ORG_ADDR_CITY_NAME_RO, 
                         BILLING_ORG_ADDR.POSTAL_CODE AS BILLING_ORG_ADDR_POSTAL_CODE_RO, BILLING_ORG_ADDR.POST_OFFICE_BOX AS BILLING_ORG_ADDR_POST_OFFICE_BOX_RO, 
                         BILLING_ORG_ADDR.INACTIVE_DATE AS BILLING_ORG_ADDR_INACTIVE_DATE_RO, BILLING_ORG_ADDR.PROVINCE_FK AS BILLING_ORG_PROVINCE_FK_RO, 
                         BILLING_ORG_PROVINCE.PROVINCE_DESC_EN AS BILLING_ORG_PROVINCE_DESC_EN_RO, BILLING_ORG_PROVINCE.PROVINCE_DESC_FR AS BILLING_ORG_PROVINCE_DESC_FR_RO, 
                         BILLING_ORG_PROVINCE.PROVINCE_SYMBOL AS BILLING_ORG_PROVINCE_SYMBOL_RO, BILLING_ORG_ADDR.COUNTRY_FK AS BILLING_ORG_COUNTRY_FK_RO, 
                         BILLING_ORG_COUNTRY.COUNTRY_DESC_EN AS BILLING_ORG_COUNTRY_DESC_EN_RO, BILLING_ORG_COUNTRY.COUNTRY_DESC_FR AS BILLING_ORG_COUNTRY_DESC_FR_RO, 
                         BILLING_ORG_COUNTRY.COUNTRY_SHORT AS BILLING_ORG_COUNTRY_SHORT_RO, BILLING_ORG_COUNTRY.POSTAL_CODE_FORMAT_RE AS BILLING_ORG_COUNTRY_POSTAL_CODE_FORMAT_RE_RO, 
                         BILLING_ORG_ORG_CONTACT.ORG_FK AS BILLING_ORG_ORG_CONTACT_ORG_FK_RO, BILLING_ORG_ORG_CONTACT.CONTACT_FK AS BILLING_ORG_ORG_CONTACT_FK_RO, 
                         BILLING_ORG_CONTACT.SURNAME AS BILLING_ORG_CONTACT_SURNAME_RO, BILLING_ORG_CONTACT.GIVEN_NAME AS BILLING_ORG_CONTACT_GIVEN_NAME_RO, 
                         BILLING_ORG_CONTACT.INITIALS AS BILLING_ORG_CONTACT_INITIALS_RO, BILLING_ORG_CONTACT.POSITION AS BILLING_ORG_CONTACT_POSITION_RO, 
                         BILLING_ORG_CONTACT.DEPARTMENT AS BILLING_ORG_CONTACT_DEPARTMENT_RO, BILLING_ORG_CONTACT.LANG AS BILLING_ORG_CONTACT_LANG_RO, 
                         BILLING_ORG_CONTACT.TELEPHONE_NO AS BILLING_ORG_CONTACT_TELEPHONE_NO_RO, BILLING_ORG_CONTACT.FAX_NO AS BILLING_ORG_CONTACT_FAX_NO_RO, 
                         BILLING_ORG_CONTACT.E_MAIL_ADDR AS BILLING_ORG_CONTACT_E_MAIL_ADDR_RO, BILLING_ORG_CONTACT.INACTIVE_DATE AS BILLING_ORG_CONTACT_INACTIVE_DATE_RO, 
                         BILLING_ORG_CONTACT.SALUTATION_FK AS BILLING_ORG_CONTACT_SALUTATION_FK_RO, BILLING_ORG_CONTACT_SALUTATION.SALUTATION_EN AS BILLING_ORG_CONTACT_SALUTATION_EN_RO, 
                         BILLING_ORG_CONTACT_SALUTATION.SALUTATION_FR AS BILLING_ORG_CONTACT_SALUTATION_FR_RO
FROM            common.CSP_APPLICANT LEFT OUTER JOIN
                         common.ORG_ADDR AS APPLICANT_ORG_ORG_ADDR ON APPLICANT_ORG_ORG_ADDR.PK = common.CSP_APPLICANT.APPLICANT_ORG_ADDR_FK LEFT OUTER JOIN
                         common.ORG_CONTACT AS APPLICANT_ORG_ORG_CONTACT ON APPLICANT_ORG_ORG_CONTACT.PK = common.CSP_APPLICANT.APPLICANT_ORG_CONTACT_FK LEFT OUTER JOIN
                         common.CONTACT AS APPLICANT_ORG_CONTACT ON APPLICANT_ORG_CONTACT.PK = APPLICANT_ORG_ORG_CONTACT.CONTACT_FK LEFT OUTER JOIN
                         common.SALUTATION AS APPLICANT_ORG_CONTACT_SALUTATION ON APPLICANT_ORG_CONTACT_SALUTATION.PK = APPLICANT_ORG_CONTACT.SALUTATION_FK LEFT OUTER JOIN
                         common.ADDR AS APPLICANT_ORG_ADDR ON APPLICANT_ORG_ADDR.PK = APPLICANT_ORG_ORG_ADDR.ADDR_FK LEFT OUTER JOIN
                         common.ORG AS APPLICANT_ORG_ORG ON APPLICANT_ORG_ORG.PK = APPLICANT_ORG_ORG_ADDR.ORG_FK LEFT OUTER JOIN
                         common.COUNTRY AS APPLICANT_ORG_COUNTRY ON APPLICANT_ORG_COUNTRY.PK = APPLICANT_ORG_ADDR.COUNTRY_FK LEFT OUTER JOIN
                         common.PROVINCE AS APPLICANT_ORG_PROVINCE ON APPLICANT_ORG_PROVINCE.PK = APPLICANT_ORG_ADDR.PROVINCE_FK LEFT OUTER JOIN
                         common.ORG_ADDR AS BILLING_ORG_ORG_ADDR ON BILLING_ORG_ORG_ADDR.PK = common.CSP_APPLICANT.BILLING_ORG_ADDR_FK LEFT OUTER JOIN
               common.ORG_CONTACT AS BILLING_ORG_ORG_CONTACT ON BILLING_ORG_ORG_CONTACT.PK = common.CSP_APPLICANT.BILLING_ORG_CONTACT_FK LEFT OUTER JOIN
                         common.CONTACT AS BILLING_ORG_CONTACT ON BILLING_ORG_CONTACT.PK = BILLING_ORG_ORG_CONTACT.CONTACT_FK LEFT OUTER JOIN
                         common.SALUTATION AS BILLING_ORG_CONTACT_SALUTATION ON BILLING_ORG_CONTACT_SALUTATION.PK = BILLING_ORG_CONTACT.SALUTATION_FK LEFT OUTER JOIN
                         common.ADDR AS BILLING_ORG_ADDR ON BILLING_ORG_ADDR.PK = BILLING_ORG_ORG_ADDR.ADDR_FK LEFT OUTER JOIN
                         common.ORG AS BILLING_ORG_ORG ON BILLING_ORG_ORG.PK = BILLING_ORG_ORG_ADDR.ORG_FK LEFT OUTER JOIN
                         common.COUNTRY AS BILLING_ORG_COUNTRY ON BILLING_ORG_COUNTRY.PK = BILLING_ORG_ADDR.COUNTRY_FK LEFT OUTER JOIN
                         common.PROVINCE AS BILLING_ORG_PROVINCE ON BILLING_ORG_PROVINCE.PK = BILLING_ORG_ADDR.PROVINCE_FK;



CREATE VIEW common.ORG_ADDR_V
AS
SELECT common.ORG_ADDR.PK, common.ORG_ADDR.UPDATED_BY, common.ORG_ADDR.TS, common.ADDR.SUITE_NO AS ADDR_SUITE_NO, common.ADDR.STREET_NAME AS ADDR_STREET_NAME, common.ADDR.CITY_NAME AS ADDR_CITY_NAME, common.ADDR.POSTAL_CODE AS ADDR_POSTAL_CODE, 
           common.ADDR.POST_OFFICE_BOX AS ADDR_POST_OFFICE_BOX, common.ADDR.UPDATED_BY AS ADDR_UPDATED_BY, common.ADDR.TS AS ADDR_TS, common.ADDR.INACTIVE_DATE AS ADDR_INACTIVE_DATE, common.ORG.ORG_NAME, common.ORG.OLD_NOTES AS ORG_OLD_NOTES, 
           common.ORG.DPD_COMPANY_FLAG AS ORG_DPD_COMPANY_FLAG, common.ORG.DELS_COMPANY_FLAG AS ORG_DELS_COMPANY_FLAG, common.ORG.INACTIVATION_DATE AS ORG_INACTIVATION_DATE, common.ORG.DRSE_FLAG AS ORG_DRSE_FLAG, common.ORG.NOTES AS ORG_NOTES, 
           common.ORG.CSP_FLAG AS ORG_CSP_FLAG, common.ORG.REP_FLAG AS ORG_REP_FLAG, common.ORG.COMPANY_CODE AS ORG_COMPANY_CODE, common.ORG.MANF_CODE AS ORG_MANF_CODE, common.ORG.MF_FLAG AS ORG_MF_FLAG, common.ORG.CT_FLAG AS ORG_CT_FLAG, 
           common.ORG.UPDATED_BY AS ORG_UPDATED_BY, common.ORG.TS AS ORG_TS, common.PROVINCE.PROVINCE_DESC_EN, common.PROVINCE.PROVINCE_DESC_FR, common.PROVINCE.PROVINCE_SYMBOL, common.COUNTRY.COUNTRY_DESC_EN, common.COUNTRY.COUNTRY_DESC_FR, 
           common.COUNTRY.COUNTRY_SHORT, common.COUNTRY.POSTAL_CODE_FORMAT_RE AS COUNTRY_POSTAL_CODE_FORMAT_RE
FROM   common.ORG INNER JOIN
           common.ORG_ADDR ON common.ORG.PK = common.ORG_ADDR.ORG_FK INNER JOIN
           common.ADDR ON common.ADDR.PK = common.ORG_ADDR.ADDR_FK INNER JOIN
           common.COUNTRY ON common.ADDR.COUNTRY_FK = common.COUNTRY.PK INNER JOIN
           common.PROVINCE ON common.ADDR.PROVINCE_FK = common.PROVINCE.PK;



CREATE VIEW common.ORG_ADDR_WV
AS
SELECT        common.ORG_ADDR.PK, common.ORG_ADDR.ORG_FK, common.ORG_ADDR.ADDR_FK, common.ORG_ADDR.UPDATED_BY, common.ORG_ADDR.TS, common.ORG.ORG_NAME AS ORG_NAME_RO, 
                         common.ORG.OLD_NOTES AS ORG_OLD_NOTES_RO, common.ORG.DPD_COMPANY_FLAG AS ORG_DPD_COMPANY_FLAG_RO, common.ORG.DELS_COMPANY_FLAG AS ORG_DELS_COMPANY_FLAG_RO, 
                         common.ORG.DRSE_FLAG AS ORG_DRSE_FLAG_RO, common.ORG.NOTES AS ORG_NOTES_RO, common.ORG.CSP_FLAG AS ORG_CSP_FLAG_RO, common.ORG.REP_FLAG AS ORG_REP_FLAG_RO, 
                         common.ORG.COMPANY_CODE AS ORG_COMPANY_CODE_RO, common.ORG.MANF_CODE AS ORG_MANF_CODE_RO, common.ORG.MF_FLAG AS ORG_MF_FLAG_RO, common.ORG.CT_FLAG AS ORG_CT_FLAG_RO, 
                         common.ORG.INACTIVATION_DATE AS ORG_INACTIVATION_DATE_RO, common.ADDR.RM_ADDR_CODE AS RM_ADDR_CODE_RO, common.ADDR.SUITE_NO AS ADDR_SUITE_NO_RO, 
                         common.ADDR.STREET_NAME AS ADDR_STREET_NAME_RO, common.ADDR.CITY_NAME AS ADDR_CITY_NAME_RO, common.ADDR.POSTAL_CODE AS ADDR_POSTAL_CODE_RO, 
                         common.ADDR.POST_OFFICE_BOX AS ADDR_POST_OFFICE_BOX_RO, common.ADDR.INACTIVE_DATE AS ADDR_INACTIVE_DATE_RO, common.ADDR.COUNTRY_FK AS COUNTRY_FK_RO, 
                         common.ADDR.PROVINCE_FK AS PROVINCE_FK_RO, common.PROVINCE.RM_PROVINCE_CODE AS RM_PROVINCE_CODE_RO, common.PROVINCE.PROVINCE_DESC_EN AS PROVINCE_DESC_EN_RO, 
                         common.PROVINCE.PROVINCE_DESC_FR AS PROVINCE_DESC_FR_RO, common.PROVINCE.PROVINCE_SYMBOL AS PROVINCE_SYMBOL_RO, common.COUNTRY.RM_COUNTRY_CODE AS RM_COUNTRY_CODE_RO, 
                         common.COUNTRY.COUNTRY_DESC_EN AS COUNTRY_DESC_EN_RO, common.COUNTRY.COUNTRY_DESC_FR AS COUNTRY_DESC_FR_RO, common.COUNTRY.COUNTRY_SHORT AS COUNTRY_SHORT_RO, 
                         common.COUNTRY.POSTAL_CODE_FORMAT_RE AS COUNTRY_POSTAL_CODE_FORMAT_RE_RO
FROM            common.ORG_ADDR LEFT OUTER JOIN
                         common.ORG ON common.ORG.PK = common.ORG_ADDR.ORG_FK LEFT OUTER JOIN
                         common.ADDR ON common.ADDR.PK = common.ORG_ADDR.ADDR_FK LEFT OUTER JOIN
                         common.PROVINCE ON common.PROVINCE.PK = common.ADDR.PROVINCE_FK LEFT OUTER JOIN
                         common.COUNTRY ON common.COUNTRY.PK = common.ADDR.COUNTRY_FK;



CREATE VIEW common.ORG_CONTACT_WV
AS
SELECT        common.ORG_CONTACT.PK, common.ORG_CONTACT.ORG_FK, common.ORG_CONTACT.CONTACT_FK, common.ORG_CONTACT.UPDATED_BY, common.ORG_CONTACT.TS, common.ORG.ORG_NAME AS ORG_NAME_RO, 
                         common.ORG.OLD_NOTES AS ORG_OLD_NOTES_RO, common.ORG.DPD_COMPANY_FLAG AS ORG_DPD_COMPANY_FLAG_RO, common.ORG.DELS_COMPANY_FLAG AS ORG_DELS_COMPANY_FLAG_RO, 
                         common.ORG.DRSE_FLAG AS ORG_DRSE_FLAG_RO, common.ORG.NOTES AS ORG_NOTES_RO, common.ORG.CSP_FLAG AS ORG_CSP_FLAG_RO, common.ORG.REP_FLAG AS ORG_REP_FLAG_RO, 
                         common.ORG.COMPANY_CODE AS ORG_COMPANY_CODE_RO, common.ORG.MANF_CODE AS ORG_MANF_CODE_RO, common.ORG.MF_FLAG AS ORG_MF_FLAG_RO, common.ORG.CT_FLAG AS ORG_CT_FLAG_RO, 
                         common.ORG.INACTIVATION_DATE AS ORG_INACTIVATION_DATE_RO, common.CONTACT.SURNAME AS CONTACT_SURNAME_RO, common.CONTACT.GIVEN_NAME AS CONTACT_GIVEN_NAME_RO, 
                         common.CONTACT.INITIALS AS CONTACT_INITIALS_RO, common.CONTACT.POSITION AS CONTACT_POSITION_RO, common.CONTACT.DEPARTMENT AS CONTACT_DEPARTMENT_RO, 
                         common.CONTACT.LANG AS CONTACT_LANG_RO, common.CONTACT.TELEPHONE_NO AS CONTACT_TELEPHONE_NO_RO, common.CONTACT.FAX_NO AS CONTACT_FAX_NO_RO, 
                         common.CONTACT.E_MAIL_ADDR AS CONTACT_E_MAIL_ADDR_RO, common.CONTACT.INACTIVE_DATE AS CONTACT_INACTIVE_DATE_RO, common.CONTACT.SALUTATION_FK AS SALUTATION_FK_RO, 
                         common.SALUTATION.SALUTATION_EN AS SALUTATION_EN_RO, common.SALUTATION.SALUTATION_FR AS SALUTATION_FR_RO
FROM            common.ORG_CONTACT LEFT OUTER JOIN
                         common.ORG ON common.ORG.PK = common.ORG_CONTACT.ORG_FK LEFT OUTER JOIN
                         common.CONTACT ON common.CONTACT.PK = common.ORG_CONTACT.CONTACT_FK LEFT OUTER JOIN
                         common.SALUTATION ON common.SALUTATION.PK = common.CONTACT.SALUTATION_FK;


COMMIT;